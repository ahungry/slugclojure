<h2>How To</h2>

<p>Load Verbose with ASDF or Quicklisp.</p>

<pre><code>(ql:quickload :verbose)
</code></pre>

<p>By default &ndash;if threading is available&ndash; a new logging thread is already started and set up with a REPL-Faucet on the INFO level, that simply prints log messages from the INFO level and above to the standard output:</p>

<pre><code>(v:info :test &quot;Hello world!&quot;)
=&gt; LOG: 2014-04-01 13:32:49 [INFO ] &lt;TEST&gt;: Hello world!
</code></pre>

<p>Each logging statement expects a category and a datum. The simplest case for a datum is a format string:</p>

<pre><code>(v:info :test &quot;2+2=~f&quot; (+ 2 2))
=&gt; LOG: 2014-04-01 13:33:20 [INFO ] &lt;TEST&gt;: 2+2=4.0
</code></pre>

<p>However, you can also pass in different objects, as well as extend the behaviour by adding methods to <code>log</code>:</p>

<pre><code>(v:info :test (make-condition 'error))
(v:info :test 'simple-error :format-control &quot;Hey!&quot;)
(v:info :test #'bt:current-thread)
</code></pre>

<p>You can change the logging level of the REPL-Faucet easily. The available levels by default are <code>:FATAL</code> <code>:SEVERE</code> <code>:ERROR</code> <code>:WARN</code> <code>:INFO</code> <code>:DEBUG</code> <code>:TRACE</code>.</p>

<pre><code>(setf (v:repl-level) :DEBUG)
</code></pre>

<p>Using the category-tree-filter you can limit what kinds of categories are shown:</p>

<pre><code>(v:add-repl-category :foo.bar.*)
(v:info :foo &quot;Foo&quot;)

(v:info :foo.bar.stuff &quot;Foo&quot;)
=&gt; LOG: 2014-04-01 13:51:03 [INFO ] &lt;FOO.BAR.STUFF&gt;: Foo
</code></pre>

<p>Verbose also allows you to pass as many categories as you want. This permits to use the categories as a form of tag, rather than a hierarchy.</p>

<pre><code>(v:info '(:system :server) &quot;Starting up!&quot;)
=&gt; LOG: 2014-04-01 13:51:52 [INFO ] &lt;SYSTEM&gt;&lt;SERVER&gt;: Starting up!
</code></pre>

<p>Log message passing through the pipeline happens in a separate thread. If you create new pipe segments for your logging pipeline that need to access some form of shared variable, you can use <code>share</code>, which is SETFable. One <code>share</code> that is most likely of interest to everyone is saved under the symbol <code>*standard-output*</code>. Setting this anew is useful if you start a new REPL session and need to redirect logging to it.</p>

<pre><code>(setf (v:shared-instance '*standard-output*) *standard-output*)
</code></pre>

<p>Since this is a very frequent thing to do, especially when hooking into remote lisps, you can achieve the same as above by using <code>output-here</code>.</p>

<p>On the other hand, you can also suppress output completely or of certain categories using <code>with-muffled-logging</code>.</p>

<pre><code>(v:with-muffled-logging (:test :something.or.other)
  (v:info :test &quot;A&quot;)
  (v:info :something.else &quot;B&quot;)
  (v:info :something.or.other &quot;C&quot;))
=&gt; LOG: 2015-03-03 17:36:41 [INFO ] &lt;SOMETHING.ELSE&gt;: B
</code></pre>

<p>The <code>with-muffled-logging</code> macro rebinds the <code>*muffled-categories*</code> by prepending the given categories. You can of course also set <code>*muffled-categories*</code> directly to achieve a global muffling. If you don&apos;t pass anything to <code>with-muffled-logging</code> or push <code>T</code> onto <code>*muffled-categories*</code>, all messages will be suppressed.</p>

<p>If you want to log to a file, you can either create your own custom file faucet, or use a preset one like the rotating-log-faucet:</p>

<pre><code>(v:add-pipe (make-instance 'v:rotating-log-faucet :file #p&quot;~/verbose.log&quot; :interval (v:make-cron-interval &quot;* * * * *&quot;)))
</code></pre>

<p>Which creates a faucet that logs to a file with &ldquo;verbose.log&rdquo; suffix in your home directory, rotating every minute as per the CRON interval. In case you want to filter the message to a certain level or category instead, you can precede it by a filter:</p>

<pre><code>(v:add-pipe (make-instance 'piping:predicate-filter :predicate #'(lambda (message) (message-visible message :WARN)))
            (make-instance 'v:rotating-log-faucet :file #p&quot;~/verbose.log&quot; :interval (v:make-cron-interval &quot;* * * * *&quot;)))
</code></pre>

<p>Using the piping constructs you can create complex logging systems or even change the pipeline on the fly. When you do, be aware that since the message passing happens in a separate thread, you need to acquire access to the pipeline first before modifying it:</p>

<pre><code>(v:with-controller-lock ()
(piping:pipeline v:*global-controller*))
</code></pre>

<p>See the documentation of  for more information.</p>

<h2>Also See</h2>

<ul>
<li><a href="http://shinmera.github.io/piping/" >Piping</a> Dynamic pipelines</li>
<li><a href="http://shinmera.github.io/dissect/" >Dissect</a> Conditions and stack-frame analysis</li>
</ul>
