<pre><code>     ___           ___
    /  /\         /  /\
   /  /::\       /  /:/
  /  /:/\:\     /  /:/
 /  /::\ \:\   /  /::\____
/__/:/\:\_\:| /__/:/\:::::\
\  \:\ \:\/:/ \__\/~|:|~~~~              ___           ___           ___
 \  \:\_\::/     |  |:|    ___          /  /\         /  /\         /  /\
  \  \:\/:/      |  |:|   /__/\        /  /::\       /  /::\       /  /::\
   \__\::/       |__|:|   \  \:\      /  /:/\:\     /  /:/\:\     /  /:/\:\
       ~~         \__\|    \__\:\    /  /::\ \:\   /  /::\ \:\   /  /::\ \:\
                           /  /::\  /__/:/\:\_\:\ /__/:/\:\ \:\ /__/:/\:\ \:\
                          /  /:/\:\ \__\/~|::\/:/ \  \:\ \:\_\/ \  \:\ \:\_\/
                         /  /:/__\/    |  |:|::/   \  \:\ \:\    \  \:\ \:\
                        /__/:/         |  |:|\/     \  \:\_\/     \  \:\_\/
                        \__\/          |__|:|~       \  \:\        \  \:\
                                        \__\|         \__\/         \__\/
</code></pre>

<h1>About</h1>

<p>This program implements a derivative of BK-Tree data structure described in &ldquo;Some Approaches to Best-Match File Searching&rdquo; paper of W. A. Burkhard and R. M. Keller. For more information about the paper, see</p>

<pre><code>@article{362025,
 author = {W. A. Burkhard and R. M. Keller},
 title = {Some approaches to best-match file searching},
 journal = {Commun. ACM},
 volume = {16},
 number = {4},
 year = {1973},
 issn = {0001-0782},
 pages = {230--236},
 doi = {http://doi.acm.org/10.1145/362003.362025},
 publisher = {ACM},
 address = {New York, NY, USA},
}
</code></pre>

<p>In the implementation, I have used below structure to store values in the nodes:</p>

<pre><code>struct node {
  distance: Metric distance between current node and its parent.
  value   : Value stored in current node.
  nodes   : Nodes collected under this node.
}
</code></pre>

<p>See below figure for an example.</p>

<p><img src="https://raw.github.com/vy/bk-tree/master/README.bktree.png" alt="Example BK-Tree" /></p>

<p>During every search phase, instead of walking through nodes via</p>

<pre><code>j = {j, j+1, j-1, j+2, j-2, ...}
  = {0, (-1)^i+1 * ceil(i/2)}, i = 1, 2, 3, ...
</code></pre>

<p>as described in the original paper, program sorts nodes according their relative distance to value being searched:</p>

<pre><code>distance = d(searched-value, current-node-value)
sort(nodes, lambda(node) { abs(distance - distance-of(node)) }
</code></pre>

<p>There is no restriction on the type of the value which will be stored in the tree, as long as you supply appropriate metric function.</p>

<h1>Performance</h1>

<p>Here is the results of a detailed test performed using <code>BK-TREE</code> package.</p>

<p>In every test, 100 random words are searched in the randomly created word databases. Words stored in the database are varying from 5 characters upto 10 characters.</p>

<p>| DB Size (words) | Threshold (distance) | Scanned Node % | Found Node % |
| &mdash;&mdash;&mdash;&mdash;&mdash;:| &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;:| &mdash;&mdash;&mdash;&mdash;&ndash;:| &mdash;&mdash;&mdash;&mdash;:|
|  10,000 | 1 |   0.110 |  0.0100 |
|         | 2 |   0.110 |  0.0100 |
|         | 3 |   0.110 |  0.0100 |
|         | 4 |   0.160 |  0.0300 |
|         | 5 |   0.370 |  0.1100 |
|         | 6 |   7.600 |  6.5800 |
|         | 7 |  24.460 | 23.4300 |
|         | 8 |  51.360 | 49.0900 |
|  50,000 | 1 |  0.0022 |  0.0020 |
|         | 2 |  0.0023 |  0.0021 |
|         | 3 |  0.0251 |  0.0030 |
|         | 4 |  0.0408 |  0.0127 |
|         | 5 |  0.3943 |  0.3196 |
|         | 6 |  2.5430 |  2.3869 |
|         | 7 |  7.6876 |  7.3874 |
|         | 8 | 23.6635 | 22.9339 |
| 100,000 | 1 |  0.0012 |  0.0010 |
|         | 2 |  0.0012 |  0.0011 |
|         | 3 |  0.0013 |  0.0017 |
|         | 4 |  0.0231 |  0.0085 |
|         | 5 |  0.3383 |  0.2998 |
|         | 6 |  1.7957 |  1.7079 |
|         | 7 |  6.3571 |  6.1654 |
|         | 8 | 18.5599 | 18.0996 |
| 500,000 | 1 |  0.0027 |  0.0002 |
|         | 2 |  0.0029 |  0.0002 |
|         | 3 |  0.0039 |  0.0011 |
|         | 4 |  0.0012 |  0.0081 |
|         | 5 |  0.3444 |  0.3213 |
|         | 6 |  0.4244 |  0.4201 |
|         | 7 | 13.4834 | 13.3619 |
|         | 8 | 30.3728 | 30.1665 |</p>

<p>How this table should be interpreted? The lower the difference between the third and fourth columns, the less redundant node visit performed. And the stability of this difference (which means no fluctuations in the difference) indicates the stability of the convergence.</p>

<p>Here is the graph of above results.</p>

<p><img src="https://raw.github.com/vy/bk-tree/master/README.report.png" alt="Results" /></p>

<h1>Example</h1>

<p>Here is an example about how to used supplied interface.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defpackage</span></i> <span class="keyword">:bk-tree-test</span> <span class="paren2">(<span class="code"><span class="keyword">:use</span> <span class="keyword">:cl</span> <span class="keyword">:bk-tree</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code">in-package <span class="keyword">:bk-tree-test</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defvar</span></i> <span class="special">*words*</span> nil</span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defvar</span></i> <span class="special">*tree*</span> <span class="paren2">(<span class="code">make-instance 'bk-tree</span>)</span></span>)</span>

<span class="comment">;; Build *WORDS* list.
</span><span class="paren1">(<span class="code"><i><span class="symbol">with-open-file</span></i> <span class="paren2">(<span class="code">in <span class="string">"/home/vy/lisp/english-words.txt"</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">loop</span></i> for line = <span class="paren3">(<span class="code">read-line in nil nil</span>)</span>
        while line
        do <span class="paren3">(<span class="code">push
            <span class="paren4">(<span class="code">string-trim '<span class="paren5">(<span class="code"><span class="character">#\space</span> <span class="character">#\tab</span> <span class="character">#\cr</span> <span class="character">#\lf</span></span>)</span> line</span>)</span>
            <span class="special">*words*</span></span>)</span></span>)</span></span>)</span>

<span class="comment">;; Check *WORDS*.
</span><span class="paren1">(<span class="code"><i><span class="symbol">if</span></i> <span class="paren2">(<span class="code">endp <span class="special">*words*</span></span>)</span>
    <span class="paren2">(<span class="code">error <span class="string">"*WORDS* is empty!"</span></span>)</span></span>)</span>

<span class="comment">;; Fill the *TREE*.
</span><span class="paren1">(<span class="code">mapc
 <span class="paren2">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren3">(<span class="code">word</span>)</span>
   <span class="paren3">(<span class="code">handler-case <span class="paren4">(<span class="code">insert-value word <span class="special">*tree*</span></span>)</span>
     <span class="paren4">(<span class="code">duplicate-value <span class="paren5">(<span class="code">ctx</span>)</span>
       <span class="paren5">(<span class="code">format t <span class="string">"Duplicated: ~a~%"</span> <span class="paren6">(<span class="code">value-of ctx</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
 <span class="special">*words*</span></span>)</span>

<span class="comment">;; Let's see that green tree.
</span><span class="paren1">(<span class="code">print-tree <span class="special">*tree*</span></span>)</span>

<span class="comment">;; Test BK-Tree.
</span><span class="paren1">(<span class="code">time
 <span class="paren2">(<span class="code">mapc
  <span class="paren3">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren4">(<span class="code">result</span>)</span>
    <span class="paren4">(<span class="code">format t <span class="string">"~a ~a~%"</span> <span class="paren5">(<span class="code">distance-of result</span>)</span> <span class="paren5">(<span class="code">value-of result</span>)</span></span>)</span></span>)</span>
  <span class="paren3">(<span class="code">search-value <span class="string">"kernel"</span> <span class="special">*tree*</span> <span class="keyword">:threshold</span> 2</span>)</span></span>)</span></span>)</span>

<span class="comment">;; Test brute levenshtein.
</span><span class="paren1">(<span class="code">time
 <span class="paren2">(<span class="code"><i><span class="symbol">loop</span></i> with target-word = <span class="string">"kernel"</span>
       with results = <span class="paren3">(<span class="code">sort
                       <span class="paren4">(<span class="code">mapcar
                        <span class="paren5">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren6">(<span class="code">word</span>)</span>
                          <span class="paren6">(<span class="code">cons <span class="paren1">(<span class="code">levenshtein target-word word</span>)</span> word</span>)</span></span>)</span>
                        <span class="special">*words*</span></span>)</span>
                       #'&lt;
                       <span class="keyword">:key</span> #'car</span>)</span>
       repeat 50      
       for <span class="paren3">(<span class="code">distance . value</span>)</span> in results
       while <span class="paren3">(<span class="code">&lt;= distance 2</span>)</span>
       do <span class="paren3">(<span class="code">format t <span class="string">"~a ~a~%"</span> distance value</span>)</span></span>)</span></span>)</span></span></code></pre>

<h1>Caveats</h1>

<p>For performance reasons, <code>LEVENSHTEIN</code> function coming with the package has some limitations both on the input string and penalty costs.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">deftype</span></i> levenshtein-cost <span class="paren2">(<span class="code"></span>)</span>
  <span class="string">"Available penalty costs."</span>
  '<span class="paren2">(<span class="code">integer 0 7</span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">deftype</span></i> levenshtein-input-length <span class="paren2">(<span class="code"></span>)</span>
  <span class="string">"Maximum distance a comparison can result."</span>
  `<span class="paren2">(<span class="code">integer 0 ,<span class="paren3">(<span class="code">- most-positive-fixnum 7</span>)</span></span>)</span></span>)</span></span></code></pre>

<p>Just in case, configure these variables suitable to your needs.</p>
