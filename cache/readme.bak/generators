<h1>Generators</h1>

<p>Generators is a library that provides python style generators in
common lisp, by using cl-cont delimited continuations</p>

<p>This library is more of an interesting toy, though as far as I know it
does work.  I dont think I have ever used this in application code,
though I think that with care, it could be.</p>

<h2>Requirements</h2>

<ul>
<li><a href="http://common-lisp.net/project/cl-cont/" >CL-CONT</a> provides the
   continuations that make this work</li>
<li>Alexandria</li>
<li>Iterate</li>
</ul>

<h2>Gotchas</h2>

<ul>
<li><p>Continuations don&apos;t play nicely with exception/signal handling,
   unwind-protect, throw/catch, or dynamic variables.  Consider using
   cl-cont:without-call/cc, if you need this functionality in a
   generator. (see-also %mv-gen for an example)</p></li>
<li><p>because cl-cont uses a code walker, it might get confused when
   interacting other code walkers (eg: iterate).  Inside of
   generators, you might have better luck with less code walking</p></li>
</ul>

<h2>API</h2>

<h3>make-generator</h3>

<p>Creates a new generator, the body of which can yield values to the calling scope</p>

<h3>yield</h3>

<p>yield - returns the next value from the generator to the caller</p>

<h3>yielding</h3>

<p>yielding - yields every value in the passed in generators</p>

<h2>Iterate clauses</h2>

<h3>(for v in-generator gen)</h3>

<p>iterates through the values produced by a generator</p>

<h3>(FOR node a-node-of-lisp-tree tree)</h3>

<p>iterates through all the nodes of a lisp tree
    eg: &apos;(1 (2 3) 4) generates (1 (2 3) 2 3 4)</p>

<h3>(FOR node a-leaf-of-lisp-tree tree)</h3>

<p>iterates through all the leaves of a lisp tree
    eg: &apos;(1 (2 3) 4) generates (1 2 3 4)</p>

<h2>Example:</h2>

<pre><code>(defun generate-lisp-tree-nodes (trees &optional leaves-only?)
  "Do a depth first traversal of some set of trees yielding every node/leaf "
  (make-generator ()
    (iter (for n in (alexandria:ensure-list trees))
      (etypecase n
        (atom (yield n))
        (list
         (unless leaves-only? (yield n))
         (yielding (generate-lisp-tree-nodes n)))))))</code></pre>

<h2>Authors</h2>

<ul>
<li><a href="http://www.acceleration.net/" >Acceleration.net</a></li>
<li><a href="http://russ.unwashedmeme.com/blog" >Russ Tyndall</a></li>
<li><a href="http://the.unwashedmeme.com/blog" >Nathan Bird</a></li>
<li><a href="http://ryepup.unwashedmeme.com/blog" >Ryan Davis</a></li>
</ul>

<pre><code>;; Copyright (c) 2013 Russ Tyndall , Acceleration.net http://www.acceleration.net
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;;  - Redistributions of source code must retain the above copyright
;;    notice, this list of conditions and the following disclaimer.
;;
;;  - Redistributions in binary form must reproduce the above copyright
;;    notice, this list of conditions and the following disclaimer in the
;;    documentation and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>
