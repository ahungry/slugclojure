<p>Common Lisp <a href="http://daringfireball.net/projects/markdown/" >Markdown</a> &rarr; html converter, using <a href="https://github.com/nikodemus/esrap" >esrap</a> for parsing, and grammar based on <a href="https://github.com/jgm/peg-markdown" >peg-markdown</a>.</p>

<p>Currently a bit slow and uses lots of RAM for large documents (particularly when using the top-level <code>doc</code> parser instead of reading documents as a sequence of <code>block</code>s), but seems to handle the tests from <a href="https://github.com/jgm/peg-markdown" >peg-markdown</a> reasonably well.</p>

<p>todo:</p>

<ul>
<li>clean up API</li>
<li>figure out how to automate testing (closure-html + <code>tree-equal</code>? need some way to normalize whitespace though), and add tests</li>
<li>optimize grammar</li>
<li>optimize esrap</li>
</ul>

<h2>Extensions:</h2>

<ul>
<li>If <code>3bmd:*smart-quotes*</code> is non-<code>NIL</code> while parsing, some extra patterns will be recognized and converted as follows (outside code blocks):

<ul>
<li><code>'</code>single quoted strings<code>'</code> &rarr; <code>&amp;lsquo;</code> &hellip; <code>&amp;rsquo;</code> like &lsquo;single quoted string&rsquo;
  (with slightly ugly heuristics to avoid contractions)</li>
<li>other single quotes <code>'</code> &rarr; <code>&amp;apos;</code> &apos;</li>
<li><code>&quot;</code>double quoted strings<code>&quot;</code> &rarr; <code>&amp;ldquo;</code> &hellip; <code>&amp;rdquo;</code>, like &ldquo;double quoted string&rdquo;</li>
<li>ellipsis <code>...</code> or <code>. . .</code> &rarr; <code>&amp;hellip;</code>, &hellip;</li>
<li>en dash <code>--</code> &rarr; <code>&amp;ndash;</code>, &ndash;</li>
<li>em dash <code>---</code> &rarr; <code>&amp;mdash;</code>, &mdash;</li>
<li>left right arrow <code>&lt;-&gt;</code> &rarr; <code>&amp;harr;</code>, &harr;</li>
<li>left arrow <code>&lt;-</code> &rarr; <code>&amp;larr;</code>, &larr;</li>
<li>right arrow <code>-&gt;</code> &rarr; <code>&amp;rarr;</code>, &rarr;</li>
<li>left right double arrow <code>&lt;=&gt;</code> &rarr; <code>&amp;hArr</code>, &hArr;</li>
<li>left double arrow <code>&lt;=</code> &rarr; <code>&amp;lArr;</code>, &lArr;</li>
<li>right double arrow <code>=&gt;</code> &rarr; <code>&amp;rArr;</code>, &rArr;</li>
</ul></li>
<li><p>Loading <code>3bmd-ext-wiki-links.asd</code> adds support for parsing simple [[]] style wiki links:
 If <code>3bmd-wiki:*wiki-links*</code> is non-<code>NIL</code> while parsing, wiki links of the form <code>[[foo]]</code> or <code>[[foo|...]]</code> will be parsed, where <code>...</code> is one or more optional args separated by <code>|</code> characters.
By default, wiki links will just print the <code>foo</code> part as normal text. To integrate into an actual wiki, users should bind <code>3bmd-wiki:*wiki-processor*</code> during printing, and define a method on <code>3bmd-wiki:process-wiki-link</code> that specializes on the value of <code>3bmd-wiki:*wiki-processor*</code> to create an HTML link from the <code>foo</code> and arguments. (API subject to change.)</p></li>
<li><p>Loading <code>3bmd-ext-code-blocks.asd</code> adds support for github style fenced code blocks, with <code>colorize</code> support:
  If <code>3bmd-code-blocks:*code-blocks*</code> is non-<code>NIL</code> while parsing, in addition to normal indented verbatim blocks, <code>```</code> can be used to delimit blocks of code:</p>

<pre><code>```
This block doesn't specify a language for colorization
```
</code></pre>

<p>or</p>

<pre><code>```lisp
;;; this block will be colorized as Common Lisp
(defun foo (bar)
  (list bar))
```
</code></pre>

<p>Language names ignore case and whitespace, so <code>Common Lisp</code> and <code>commonlisp</code> are treated the same, see <code>3bmd:*colorize-name-map*</code> for full list of supported language names, or add names to that to recognize a custom colorize <code>coloring-type</code>.
If a language name is not specified after the opening <code>```</code>, <code>3bmd-code-blocks:*code-blocks-default-colorize*</code> can be set to one of the keywords naming a <code>coloring-type</code> recognized by <code>colorize</code> to specify a default, otherwise the block will not be colorized.</p></li>
<li><p>Loading <code>3bmd-ext-definition-lists.asd</code> adds support for parsing PHP Markdown Extra style definition lists
 If <code>3bmd-definition-lists:*definition-lists*</code> is non-<code>NIL</code> while parsing, the following definition list will be recognized (see <a href="http://michelf.ca/projects/php-markdown/extra/#def-list">http://michelf.ca/projects/php-markdown/extra/#def-list</a>):</p>

<pre><code>Term
: definition
</code></pre></li>
<li><p>Loading <code>3bmd-ext-tables.asd</code> adds support for parsing PHP Markdown Extra style tables
 If <code>3bmd-tables:*tables*</code> is non-<code>NIL</code> while parsing, the following will be recognized as tables (see <a href="http://michelf.ca/projects/php-markdown/extra/#table">http://michelf.ca/projects/php-markdown/extra/#table</a>):</p>

<pre><code>| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |

| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |

| Name | Description          |
| ------------- | ----------- |
| Help      | Display the help window.|
| Close     | Closes a window     |

| Left-Aligned  | Center Aligned  | Right Aligned |
| :------------ |:---------------:| -----:|
| col 3 is      | some wordy text | $1600 |
| col 2 is      | centered        |   $12 |
| zebra stripes | are neat        |    $1 |
</code></pre>

<p>The following simplified table style is not supported, because it is ambiguous,
especially, without heading:</p>

<pre><code>First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell</code></pre></li>
</ul>
