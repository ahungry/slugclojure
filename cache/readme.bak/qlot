<h1>qlot</h1>

<p><a href="https://circleci.com/gh/fukamachi/qlot" ><img src="https://circleci.com/gh/fukamachi/qlot.svg?style=svg" alt="Circle CI" /></a></p>

<p>Qlot is a project-local library installer using Quicklisp facility. This aims to be like <a href="http://bundler.io" >Bundler</a> of Ruby or <a href="http://search.cpan.org/~miyagawa/Carton/lib/Carton.pm" >Carton</a> of Perl.</p>

<p><strong><span style="color:red">Warning</span>: This software is still ALPHA quality. The APIs will be likely to change.</strong></p>

<h2>Usage</h2>

<pre><code># "qlfile" of "myapp"
git clack https://github.com/fukamachi/clack.git
github datafly fukamachi/datafly :branch v0.7.x
ql log4cl 2014-03-17</code></pre>

<pre><code><span class="code"><span class="comment">;; Installing libraries project-locally.
</span><span class="paren1">(<span class="code">qlot:install <span class="keyword">:myapp</span></span>)</span>

<span class="comment">;; Loading a project with its project-local quicklisp.
</span><span class="paren1">(<span class="code">qlot:quickload <span class="keyword">:myapp</span></span>)</span>

<span class="comment">;; Updating depending libraries of a project.
</span><span class="paren1">(<span class="code">qlot:update <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<h2>What qlot is trying to solve</h2>

<p>We have Quicklisp, the central library registry. It made installation of libraries damn easy.</p>

<p>However, what only you can specify is the month of distribution. Which means you have to use all libraries of the same moment and you cannot use a newer/older version of a library for your project.</p>

<p>&ldquo;local-projects/&rdquo; or ASDF configurations may be a solution to this problem, but there are a couple of problems.</p>

<p>1) <em>They are not project-local.</em> If you have multiple projects that use the different version of the same library, it would be a problem.</p>

<p>2) <em>They are difficult to fix the version or to update them.</em> If your project need to work on other than your machine, for instance on other people&apos;s machine or on servers, the version of depending libraries should be the same.</p>

<p>This is what qlot is trying to solve.</p>

<h2>Installation</h2>

<h3>via Quicklisp</h3>

<p>As <a href="https://github.com/quicklisp/quicklisp-projects/issues/716" >qlot is going to be included</a> in Quicklisp dist in August 2014, you can install it through Quicklisp.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">ql:quickload <span class="keyword">:qlot</span></span>)</span></span></code></pre>

<h2>Tutorial</h2>

<h3>Adding &ldquo;qlfile&rdquo;</h3>

<p>Put a file &ldquo;qlfile&rdquo; at the root of your project directory.</p>

<p>See <a href="#qlfile-syntax" >qlfile syntax</a> section to know how to write it.</p>

<h3>Installation of libraries</h3>

<p>You can install libraries into the project directory via:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:install <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<p>It creates <code>quicklisp/</code> directory in the project directory and a file <code>qlfile.lock</code>.</p>

<p><code>qlfile.lock</code> is similar to <code>qlfile</code> except the library versions are qualified. This will ensure that other developers or your deployment environment use exactly the same versions of libraries you just installed.</p>

<p>Make sure you add <code>qlfile</code> and <code>qlfile.lock</code> to your version controlled repository and make the <code>quicklisp/</code> directory ignored.</p>

<pre><code>$ echo quicklisp/ &gt;&gt; .gitignore
$ git add qlfile qlfile.lock
$ git commit -m 'Start using qlot.'</code></pre>

<h3>Loading your application</h3>

<p>To load your qlot-ready application, use <code>qlot:quickload</code> instead of <code>ql:quickload</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:quickload <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<h3>Executing forms with project-local Quicklisp</h3>

<p>Although <code>qlot:quickload</code> loads a project with its project-local Quicklisp, the Quicklisp path will be restored to the default one after that.</p>

<p>This could cause significant problem if your application loads other libraries during run-time.</p>

<p>For example, <a href="http://clacklisp.org/" >Clack</a> loads a server handler when executing <code>clackup</code> and, the important part is, it loads with the system default Quicklisp, not the project-local one.</p>

<p>To prevent the mess, wrap all code which would load other libraries in run-time with <code>qlot:with-local-quicklisp</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">qlot:with-local-quicklisp</span></i> <span class="keyword">:myapp</span>
  <span class="paren2">(<span class="code">clack:clackup <span class="special">*app*</span> <span class="keyword">:server</span> <span class="keyword">:wookie</span></span>)</span></span>)</span></span></code></pre>

<h3>Updating the project-local quicklisp</h3>

<p>You can update the content of <code>quicklisp/</code> directory via:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:update <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<p>It will also overwrite <code>qlfile.lock</code>.</p>

<h3>Bundling libraries</h3>

<p>You can bundle all depending libraries by adding the project-local <code>quicklisp/</code> directory to version controlled repository.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:install <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<pre><code>$ echo quicklisp/cache &gt;&gt; .gitignore
$ echo quicklisp/tmp &gt;&gt; .gitignore
$ git add .gitignore quicklisp/
$ git commit -m 'Bundle dependencies.'</code></pre>

<h2>Commands</h2>

<h3>install</h3>

<p><code>qlot:install</code> will install Quicklisp and libraries that declared in <code>qlfile</code> project-locally. <code>qlfile.lock</code> will be used with precedence if it exists.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:install <span class="keyword">:myapp</span></span>)</span>
<span class="paren1">(<span class="code">qlot:install #P<span class="string">"/path/to/myapp/"</span></span>)</span>
<span class="paren1">(<span class="code">qlot:install #P<span class="string">"/path/to/myapp/my-qlfile"</span></span>)</span></span></code></pre>

<h3>update</h3>

<p><code>qlot:update</code> will update the project-local <code>quicklisp/</code> directory using <code>qlfile</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:update <span class="keyword">:myapp</span></span>)</span>
<span class="paren1">(<span class="code">qlot:update #P<span class="string">"/path/to/myapp/"</span></span>)</span>
<span class="paren1">(<span class="code">qlot:update #P<span class="string">"/path/to/myapp/my-qlfile"</span></span>)</span></span></code></pre>

<h3>quickload</h3>

<p><code>qlot:quickload</code> is similar to <code>ql:quickload</code> except it uses its project-local <code>quicklisp/</code> directory.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">qlot:quickload <span class="keyword">:myapp</span></span>)</span></span></code></pre>

<h3>with-local-quicklisp</h3>

<p>Eval the given form in the local quicklisp environment.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">qlot:with-local-quicklisp</span></i> <span class="keyword">:myapp</span>
  <span class="paren2">(<span class="code">ql:quickload <span class="keyword">:drakma</span></span>)</span></span>)</span></span></code></pre>

<h2><code>qlfile</code> syntax</h2>

<p>&ldquo;qlfile&rdquo; is a collection of Quicklisp dist declarations. Each line of that represents a dist.</p>

<pre><code>&lt;source&gt; &lt;project name&gt; [arg1, arg2..]</code></pre>

<p>Currently, <code>&lt;source&gt;</code> must be one of <code>ql</code>, <code>http</code>, <code>git</code> or <code>github</code>.</p>

<h3>ql</h3>

<pre><code>ql &lt;project name&gt; &lt;version&gt;
ql &lt;project name&gt; :latest
ql :all &lt;version&gt;</code></pre>

<p><code>ql</code> source will download libraries from Quicklisp official dist, but you can specify the version.</p>

<p>If you want to use Clack in Quicklisp dist of January 13, 2014, qlfile would be like this.</p>

<pre><code>ql clack 2014-01-13</code></pre>

<p><code>ql</code> source also allows <code>:all</code> as <code>&lt;dist name&gt;</code> and <code>:latest</code> as the version.</p>

<pre><code>ql :all 2014-01-13
ql clack :latest</code></pre>

<h3>http</h3>

<pre><code>http &lt;project name&gt; &lt;url&gt; [&lt;file md5&gt;]</code></pre>

<p><code>http</code> source will download a tarball.</p>

<pre><code>http yason http://netzhansa.com/yason.tar.gz</code></pre>

<h3>git</h3>

<pre><code>git &lt;project name&gt; &lt;repos url&gt;
git &lt;project name&gt; &lt;repos url&gt; :ref &lt;commit ref&gt;
git &lt;project name&gt; &lt;repos url&gt; :branch &lt;branch name&gt;
git &lt;project name&gt; &lt;repos url&gt; :tag &lt;tag name&gt;</code></pre>

<p><code>git</code> source will download libraries from a public git repository.</p>

<pre><code>git clack https://github.com/fukamachi/clack.git</code></pre>

<p>You can also specify <code>:ref</code>, <code>:branch</code> or <code>:tag</code>.</p>

<pre><code>git clack https://github.com/fukamachi/clack.git :branch develop
git datafly https://github.com/fukamachi/datafly.git :tag v0.7.4
git cl-dbi https://github.com/fukamachi/cl-dbi.git :ref 54928984e5756e92ba298aae51de8b95a6b0cf4b</code></pre>

<h3>github</h3>

<pre><code>github &lt;project name&gt; &lt;repos&gt;
github &lt;project name&gt; &lt;repos&gt; :ref &lt;commit ref&gt;
github &lt;project name&gt; &lt;repos&gt; :branch &lt;branch name&gt;
github &lt;project name&gt; &lt;repos&gt; :tag &lt;tag name&gt;</code></pre>

<p><code>github</code> source is similar to <code>git</code>, but it is specifically for GitHub. As it uses GitHub API and tarballs GitHub serves, it doesn&apos;t require &ldquo;git&rdquo; command.</p>

<pre><code>github datafly fukamachi/datafly
github datafly fukamachi/datafly :branch develop</code></pre>

<h3>Priorities of distributions</h3>

<p>If multiple distributions provide the same library, lower one would take priority over higher ones.</p>

<h2>Author</h2>

<ul>
<li>Eitaro Fukamachi (e.arrows@gmail.com)</li>
</ul>

<h2>Copyright</h2>

<p>Copyright (c) 2014 Eitaro Fukamachi (e.arrows@gmail.com)</p>

<h2>License</h2>

<p>Licensed under the MIT License.</p>
