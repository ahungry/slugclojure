<h1>Common Lisp HL7-Parser</h1>

<p>HL7-Parser for HL7 Version 2 Messages (decode / encode) for Common Lisp.</p>

<blockquote>
<p>The HL7 Version 2 Messaging Standard — Application Protocol for Electronic
Data Exchange in Healthcare Environments — is considered to be the workhorse
of data exchange in healthcare and is the most widely implemented standard
for healthcare information in the world.</p>
</blockquote>

<p>Source: http://www.hl7.org/about/FAQs/index.cfm?ref=nav (&ldquo;General HL7 FAQ&rdquo; &gt; &ldquo;Version 2&rdquo; &gt; &ldquo;What is Version 2?&rdquo;)</p>

<h2>License</h2>

<p>http://opensource.org/licenses/BSD-3-Clause</p>

<h2>Implementation</h2>

<p>SBCL and CCL on Debian GNU/Linux</p>

<h2>Installation</h2>

<p>HL7-Parser is &lsquo;quickloadable&rsquo;:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">ql:quickload <span class="string">"hl7-parser"</span></span>)</span></span></code></pre>

<h2>Usage</h2>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> decode <span class="paren2">(<span class="code">string-or-stream</span>)</span></span></span></span></code></pre>

<p>decode: Accepts a String or a Stream containing HL7-Messages</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> encode <span class="paren2">(<span class="code">message-list &amp;key <span class="paren3">(<span class="code">delimiter <span class="string">"|^~</span><span class="string">\\</span><span class="string">&amp;"</span></span>)</span> <span class="paren3">(<span class="code">message-delimiter nil</span>)</span></span>)</span></span></span></span></code></pre>

<p>encode:
 * <code>message-list</code> List of decoded HL7-Messages
 * <code>delimiter</code> for encoding of Message
 * <code>message-delimiter</code> if true then the encoded Messages ends with a <code>#\Newline</code> if nil then no <code>#\Newline</code> is appended (default nil).</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> test-parser <span class="paren2">(<span class="code">in-file out-file &amp;key <span class="paren3">(<span class="code">external-format <span class="keyword">:iso-8859-1</span></span>)</span> <span class="paren3">(<span class="code">output-delimiters <span class="string">"|^~</span><span class="string">\\</span><span class="string">&amp;"</span></span>)</span></span>)</span></span></span></span></code></pre>

<p>test-parser: Read <code>in-file</code> (with HL7-messages) decode every line and then encode it and write it to <code>out-file</code>.</p>

<p>Use <code>diff in-file out-file</code> to check if the encode and decode of the messages work.</p>

<h2>Example</h2>

<pre><code><span class="code">CL-USER&gt; <span class="paren1">(<span class="code">hl7-parser:decode <span class="paren2">(<span class="code">format nil <span class="string">"MSH|^~~</span><span class="string">\\</span><span class="string">&amp;|test|test^test|~cEVN||123~c~c"</span> <span class="character">#\Return</span> <span class="character">#\Return</span> <span class="character">#\Newline</span> </span>)</span></span>)</span>
<span class="paren1">(<span class="code"><span class="paren2">(<span class="code"><span class="keyword">:MESSAGE</span>
  <span class="paren3">(<span class="code"><span class="keyword">:SEGMENT</span> <span class="paren4">(<span class="code"><span class="keyword">:FIELD</span> <span class="string">"MSH"</span> <span class="string">"|^~</span><span class="string">\\</span><span class="string">&amp;"</span> <span class="string">"test"</span> <span class="paren5">(<span class="code"><span class="keyword">:COMPONENT</span> <span class="string">"test"</span> <span class="string">"test"</span></span>)</span> <span class="string">""</span></span>)</span>
   <span class="paren4">(<span class="code"><span class="keyword">:FIELD</span> <span class="string">"EVN"</span> <span class="string">""</span> <span class="string">"123"</span></span>)</span> <span class="string">""</span></span>)</span></span>)</span></span>)</span>

CL-USER&gt; <span class="paren1">(<span class="code">hl7-parser:encode <span class="paren2">(<span class="code">hl7-parser:decode <span class="paren3">(<span class="code">format nil <span class="string">"MSH|^~~</span><span class="string">\\</span><span class="string">&amp;|test|test^test|~cEVN||123~c~c"</span> <span class="character">#\Return</span> <span class="character">#\Return</span> <span class="character">#\Newline</span> </span>)</span></span>)</span></span>)</span>
<span class="paren1">(<span class="code"><span class="string">"MSH|^~</span><span class="string">\\</span><span class="string">&amp;|test|test^test|^MEVN||123^M"</span></span>)</span> <span class="comment">; ^M -&gt; #\Return
</span>
CL-USER&gt; <span class="paren1">(<span class="code">hl7-parser:encode <span class="paren2">(<span class="code">hl7-parser:decode <span class="paren3">(<span class="code">format nil <span class="string">"MSH|^~~</span><span class="string">\\</span><span class="string">&amp;|test|test^test|~cEVN||123~c~c"</span> <span class="character">#\Return</span> <span class="character">#\Return</span> <span class="character">#\Newline</span> </span>)</span></span>)</span> <span class="keyword">:message-delimiter</span> t</span>)</span>
<span class="paren1">(<span class="code"><span class="string">"MSH|^~</span><span class="string">\\</span><span class="string">&amp;|test|test^test|^MEVN||123^M
"</span></span>)</span> <span class="comment">; ^M -&gt; #\Return</span></span></code></pre>

<p>How to set Delimiters for encoding:
```cl
CL-USER&gt; (hl7-parser:decode (format nil &ldquo;MSH#^~~\&amp;#test#test^test#~c&rdquo; #\Newline ))
((:MESSAGE (:FIELD &ldquo;MSH&rdquo; &ldquo;#^~\&amp;&rdquo; &ldquo;test&rdquo; (:COMPONENT &ldquo;test&rdquo; &ldquo;test&rdquo;) &quot;&quot;)))</p>

<p>CL-USER&gt; (hl7-parser:encode (hl7-parser:decode (format nil &ldquo;MSH|^~~\&amp;|test|test^test|~c&rdquo; #\Newline )) :delimiter &ldquo;#^~\&amp;&rdquo;)
(&ldquo;MSH#^~\&amp;#test#test^test#&rdquo;)
```</p>

<p>Pay attention to the character escaping (~ in format directive and backslashes)</p>
