<h1>lparallel</h1>

<p>lparallel is a library for parallel programming in Common Lisp, featuring</p>

<ul>
<li>a simple model of task submission with receiving queue</li>
<li>constructs for expressing fine-grained parallelism</li>
<li>asynchronous condition handling across thread boundaries</li>
<li>parallel versions of map, reduce, sort, remove, and many others</li>
<li>promises, futures, and delayed evaluation constructs</li>
<li>computation trees for parallelizing interconnected tasks</li>
<li>bounded and unbounded FIFO queues</li>
<li>high and low priority tasks</li>
<li>task killing by category</li>
<li>integrated timeouts</li>
</ul>

<p>See http://lparallel.org for documentation and examples.</p>

<h3>Running</h3>

<p>lparallel should run on any Common Lisp implementation supported by
bordeaux-threads. The following implementations successfully pass the
test suite:</p>

<ul>
<li>ABCL</li>
<li>Allegro</li>
<li>Clozure</li>
<li>LispWorks</li>
<li>SBCL</li>
</ul>

<p>To run tests, load <code>lparallel-test.asd</code> and call <code>(lparallel-test:execute)</code>.</p>

<p>To run benchmarks, load <code>lparallel-bench.asd</code> and call
<code>(lparallel-bench:execute N)</code> where <code>N</code> is the number of worker threads.</p>

<h3>Author</h3>

<p>James M. Lawrence <a href="m&#x61;&#105;l&#x74;&#111;:&#x6C;&#108;m&#x6A;&#106;m&#x6C;&#108;@&#x67;&#109;a&#x69;&#108;.&#x63;&#111;m">m&#x61;&#105;l&#x74;&#111;:&#x6C;&#108;m&#x6A;&#106;m&#x6C;&#108;@&#x67;&#109;a&#x69;&#108;.&#x63;&#111;m</a></p>
