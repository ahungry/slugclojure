<h1>CL-DBI - Database independent interface for Common Lisp</h1>

<p><a href="https://travis-ci.org/fukamachi/cl-dbi" ><img src="https://travis-ci.org/fukamachi/cl-dbi.svg?branch=master" alt="Build Status" /></a></p>

<h2>Usage</h2>

<h3>Connecting and executing a query</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defvar</span></i> <span class="special">*connection*</span>
  <span class="paren2">(<span class="code">dbi:connect <span class="keyword">:mysql</span>
               <span class="keyword">:database-name</span> <span class="string">"test"</span>
               <span class="keyword">:username</span> <span class="string">"nobody"</span>
               <span class="keyword">:password</span> <span class="string">"1234"</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">let*</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">query <span class="paren4">(<span class="code">dbi:prepare <span class="special">*connection*</span>
                           <span class="string">"SELECT * FROM somewhere WHERE flag = ? OR updated_at &gt; ?"</span></span>)</span></span>)</span>
       <span class="paren3">(<span class="code">result <span class="paren4">(<span class="code">dbi:execute query 0 <span class="string">"2011-11-01"</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">loop</span></i> for row = <span class="paren3">(<span class="code">dbi:fetch result</span>)</span>
     while row
     <span class="comment">;; process "row".
</span>       </span>)</span></span>)</span></span></code></pre>

<h3>Using <code>dbi:with-connection</code> to ensure connections are closed</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">dbi:with-connection</span></i> <span class="paren2">(<span class="code">conn <span class="keyword">:sqlite3</span> <span class="keyword">:database-name</span> <span class="string">"/home/fukamachi/test.db"</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">let*</span></i> <span class="paren3">(<span class="code"><span class="paren4">(<span class="code">query <span class="paren5">(<span class="code">dbi:prepare conn <span class="string">"SELECT * FROM People"</span></span>)</span></span>)</span>
         <span class="paren4">(<span class="code">result <span class="paren5">(<span class="code">dbi:execute query</span>)</span></span>)</span></span>)</span>
    <span class="paren3">(<span class="code"><i><span class="symbol">loop</span></i> for row = <span class="paren4">(<span class="code">dbi:fetch result</span>)</span>
       while row
       do <span class="paren4">(<span class="code">format t <span class="string">"~A~%"</span> row</span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<h2>Description</h2>

<p>CL-DBI provides the same interface for multiple SQL databases. You need not learn the API of each database.</p>

<p>This library is especially convenient when you want to use different databases in different environments. For example, you may use MySQL as a production database, but use SQLite3 on your development system. To switch database backends you need only change the arguments to <code>dbi:connect</code>.</p>

<h2>Databases</h2>

<ul>
<li>SQLite3</li>
<li>PostgreSQL</li>
<li>MySQL</li>
</ul>

<h2>Installation</h2>

<p>This library will be available on Quicklisp when ready for use.</p>

<h2>API</h2>

<h3>User-Level API</h3>

<ul>
<li>connect [driver-name &amp; params] =&gt; &lt;dbi-connection&gt;</li>
<li>connect-cached [driver-name &amp; params] =&gt; &lt;dbi-connection&gt;</li>
<li>disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL</li>
<li>prepare [conn sql] =&gt; &lt;dbi-query&gt;</li>
<li>execute [query &amp; params] =&gt; something</li>
<li>fetch [result] =&gt; a row data as plist</li>
<li>fetch-all [result] =&gt; a list of all row data</li>
<li>do-sql [conn sql &amp; params]</li>
<li>list-all-drivers [] =&gt; (&lt;dbi-driver&gt; ..)</li>
<li>find-driver [driver-name] =&gt; &lt;dbi-driver&gt;</li>
<li>with-transaction [conn]</li>
<li>begin-transaction [conn]</li>
<li>commit [conn]</li>
<li>rollback [conn]</li>
<li>ping [conn] =&gt; T or NIL</li>
<li>row-count [conn] =&amp;gt a number of rows modified by the last executed INSERT/UPDATE/DELETE</li>
<li>with-connection [connection-variable-name &amp;body body]</li>
</ul>

<h3>Driver-Level API</h3>

<ul>
<li>&lt;dbi-driver&gt;</li>
<li>&lt;dbi-connection&gt;</li>
<li>make-connection [driver params]</li>
<li>disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL</li>
<li>prepare [conn sql] =&gt; &lt;dbi-query&gt;</li>
<li>fetch-using-connection [conn result] =&gt; a row data as plist</li>
<li>do-sql [conn sql &amp; params]</li>
<li>execute-using-connection =&gt; something</li>
<li>escape-sql =&gt; string</li>
<li>begin-transaction [conn]</li>
<li>commit [conn]</li>
<li>rollback [conn]</li>
<li>ping [conn] =&gt; T or NIL</li>
<li>row-count [conn] =&amp;gt a number of rows modified by the last executed INSERT/UPDATE/DELETE</li>
</ul>

<h2>Creating a new driver</h2>

<p>Create a subclass of &lt;dbi-driver&gt; and implement following methods.</p>

<ul>
<li>make-connection</li>
<li>disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL</li>
<li>execute-using-connection</li>
</ul>

<p>These methods can be overriden if needed.</p>

<ul>
<li>prepare</li>
<li>fetch-using-connection</li>
<li>do-sql</li>
<li>escape-sql</li>
</ul>

<h2>Dependencies</h2>

<ul>
<li>cl-annot</li>
<li>CL-Syntax</li>
<li>SPLIT-SEQUENCE</li>
<li>closer-mop</li>
</ul>

<h2>Author</h2>

<ul>
<li>Eitaro Fukamachi (e.arrows@gmail.com)</li>
</ul>

<h2>Copyright</h2>

<p>Copyright (c) 2011 Eitaro Fukamachi (e.arrows@gmail.com)</p>

<h1>License</h1>

<p>Licensed under the LLGPL License.</p>
