<h1>Hermetic</h1>

<p>Simple authentication for <a href="http://clacklisp.org/" >Clack</a>-based Common Lisp web
applications.</p>

<h1>Usage</h1>

<p>See the demo app for a complete example.</p>

<h2>Available Password-Hashing Functions</h2>

<p>To mitigate the risks of the NSA convincing people to hash passwords with things
like SHA-256, only PBKDF2 (And eventually scrypt) is supported</p>

<ul>
<li><code>:pbkdf2-sha1</code></li>
<li><code>:pbkdf2-sha256</code></li>
<li><code>:pbkdf2-sha512</code></li>
</ul>

<h2><code>setup</code></h2>

<p>Hermetic is not opinionated, doesn&apos;t integrate into an existing database or
create any models. As such, it needs to be told how to find a user&apos;s
information to provide authentication. This is what <code>setup</code> is for:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">setup
    <span class="keyword">:user-p</span>        <span class="comment">;; str-&gt;bool, t if a username exists, nil otherwise
</span>    <span class="keyword">:user-pass</span>     <span class="comment">;; str-&gt;str, maps a username to a password (hash, hopefully)
</span>    <span class="keyword">:user-roles</span>    <span class="comment">;; str-&gt;(list sym), maps a username to a list of roles,
</span>                   <span class="comment">;; for example: (:user) (:user :tester :staff) (:user :admin)
</span>    <span class="keyword">:session</span>       <span class="comment">;; the /expression/ for the session object. ningle:*session* on
</span>                   <span class="comment">;; Ningle &lt;https://github.com/fukamachi/ningle&gt;.
</span>    <span class="keyword">:denied</span>        <span class="comment">;; A function that displays an "access denied" message
</span>                   </span>)</span></span></code></pre>

<p>For example, if your users are stored in a simple in-memory hash-table as in the
demo app:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defmacro</span></i> get-user <span class="paren2">(<span class="code">username</span>)</span>
  `<span class="paren2">(<span class="code">gethash ,username <span class="special">*users*</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code">setup
 <span class="keyword">:user-p</span> #'<span class="paren2">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren3">(<span class="code">user</span>)</span> <span class="paren3">(<span class="code">get-user user</span>)</span></span>)</span>
 <span class="keyword">:user-pass</span> #'<span class="paren2">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren3">(<span class="code">user</span>)</span> <span class="paren3">(<span class="code">getf <span class="paren4">(<span class="code">get-user user</span>)</span> <span class="keyword">:pass</span></span>)</span></span>)</span>
 <span class="keyword">:user-roles</span> #'<span class="paren2">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren3">(<span class="code">user</span>)</span> <span class="paren3">(<span class="code">getf <span class="paren4">(<span class="code">get-user user</span>)</span> <span class="keyword">:roles</span></span>)</span></span>)</span>
 <span class="keyword">:session</span> <span class="special">*session*</span></span>)</span></span></code></pre>

<h2><code>login</code></h2>

<p>When creating your login view, the <code>login</code> macro handles most of the work for
you.</p>

<h2><code>auth</code></h2>

<p>Grants access to a site only to users whose roles intersect with the roles in
the first argument.</p>

<p>If an access denied page is not provided, the global one is used instead.</p>

<p>Example:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">setf <span class="paren2">(<span class="code">route <span class="special">*app*</span> <span class="string">"/user/profile/:userid"</span> <span class="keyword">:method</span> <span class="keyword">:GET</span></span>)</span>
      <span class="paren2">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren3">(<span class="code">params
        <span class="paren4">(<span class="code">auth <span class="paren5">(<span class="code"><span class="keyword">:user</span></span>)</span>
              <span class="paren5">(<span class="code">render-template <span class="string">"templates/profile.html"</span></span>)</span>
              <span class="paren5">(<span class="code">render-error <span class="string">"You have to log in to view user profiles."</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<h2>Misc.</h2>

<p>When <code>auth</code> isn&apos;t enough to determine who gets to use what, Hermetic provides a
few functions for accessing user data from inside a view.</p>

<ul>
<li><code>logged-in-p</code>: Exactly what it says on the tin.</li>
<li><code>user-name</code>: Returns the username of the current user.</li>
<li><code>roles</code>: Returns the list of roles of the current user.</li>
<li><code>role-p</code>: Checks if a user has a role.</li>
</ul>

<h2><code>logout</code></h2>

<p>Logs the user out. Takes two expressions, <code>on-success</code> and <code>on-failure</code>.</p>

<h1>License</h1>

<p>Copyright (c) 2013 Fernando Borretti (eudoxiahp@gmail.com).</p>

<p>Licensed under the MIT License.</p>
