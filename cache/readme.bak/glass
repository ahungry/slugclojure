<h1>glass</h1>

<p>General Lisp Authentication Security Services (glass) is a Common Lisp GSS-compatible API. It provides a set of 
generic functions which systems providing authentication services should specialize. Users wishing to consume
these services should use these rather than functions exported directly from the providing packages. </p>

<p>The supported authentication systems are Kerberos, NTLM and SPNEGO (Negotiate). </p>

<h2>1. Introduction</h2>

<p>The GSSAPI specifies a generalized mechanism for defining security service APIs. It is the most common way 
to consume Kerberos authentication. </p>

<h2>2. Usage</h2>

<p>This package provides a set of generic functions. Systems which provide security systems should provide 
methods for these generics.</p>

<h3>2.1 Kerberos</h3>

<p>Kerberos support is provided by <a href="https://github.com/fjames86/cerberus" >cerberus</a>.</p>

<pre><code>;; client
CL-USER&gt; (cerberus:logon-user "username@realm" "password" :kdc-address "10.1.1.1")
CL-USER&gt; (defvar *credentials* 
                 (gss:acquire-credentials :kerberos 
                                         "host/host.name.com@realm"))
*CREDENTIALS*
CL-USER&gt; (multiple-value-bind (context buffer) (gss:initialize-security-context *context* :mutual t)
           (defvar *client-context* context)
           (defvar *buffer* buffer))

;; send the buffer to the application server
CL-USER&gt; (cerberus:logon-service "host/host.name.com@realm" "password")
CL-USER&gt; (defvar *server-credentials* (gss:acquire-credentials :kerberos nil))
*SERVER-CREDENTIALS*
CL-USER&gt; (multiple-value-bind (context response-buffer) (gss:accept-security-context *server-credentials* *buffer*)
            (defvar *server-context* context)
            (defvar *response-buffer* response-buffer))

;; send the response buffer back to the client and pass to INITIALIZE-SECURITY-CONTEXT so the 
;; client can authenticate the server
CL-USER&gt; (gss:initialize-security-context *client-context* :buffer *response-buffer*)

;; compute checksums
CL-USER&gt; (gss:get-mic *client-context* #(1 2 3 4))
CL-USER&gt; (gss:verify-mic *server-context* (gss:get-mic *client-context* #(1 2 3 4)))

;; encrypt message
CL-USER&gt; (gss:wrap *client-context* #(1 2 3 4))
CL-USER&gt; (gss:unwrap *server-context* (gss:wrap *client-context* #(1 2 3 4)))
</code></pre>

<h3>2.2 NTLM</h3>

<p>NTLM support is provided by <a href="https://github.com/fjames86/ntlm" >ntlm</a>. NTLM is a legacy protocol
and is not recommended for use over unsecure networks, nevertheless it is often required for use with
various Microsoft tools.</p>

<h3>2.3 SPNEGO (Negotiate)</h3>

<p>Negotiate support is provided by <a href="https://github.com/fjames86/spnego" >spnego</a>. This system is essentially a
wrapper around NTLM and Kerberos, with an initial negotiation stage to determine a mutually agreeable system.</p>

<h2>3. License</h2>

<p>Licensed under the terms of the MIT license.</p>

<p>Frank James 
May 2015.</p>
