<h1>infix-dollar-reader</h1>

<p>Infix <code>$</code> operator for reducing redundant paranthesis.</p>

<h3>usage:</h3>

<ol>
<li><p>load package;</p>

<pre><code>(asdf:load-system :infix-dollar-reader)
</code></pre></li>
<li><p>enable to use infix <code>$</code> notation;</p>

<pre><code>(syntax:use-syntax :infix-dollar)
</code></pre></li>
<li><p>write your forms with infix <code>$</code> notation s.t. <code>(the fixnum $ + x 10)</code></p></li>
</ol>

<h3>example:</h3>

<pre><code>    (fun x y $ fun2 z)
</code></pre>

<p>This form above would be expanded to below form.</p>

<pre><code>    (fun x y (fun2 z))
</code></pre>

<p>And also,</p>

<pre><code>    (= (+ 1 2 $ * 3 4 $ + 5 6) (+ 1 2 (* 3 4 (+ 5 6)))) ; =&gt; T
</code></pre>

<h3>limitation:</h3>

<p>A symbol name which has any <code>$</code> characters would cause unexpected behavior.</p>

<p>You should not use any <code>$</code> characters in a symbol name without barrier or intern from a string.</p>

<p>e.g.</p>

<pre><code>    (syntax:use-syntax :infix-dollar)

    (defconstant foo$- 1) ; =&gt; FOO
    ;; would be parsed as (defconstant foo(- 1))

    (defconstant |FOO$-| 1) ; =&gt; FOO$- or |FOO$-|
    ;; not be parsed a #\$ as a #\( because of barrier

    (intern &quot;FOO$-&quot;) ; =&gt; FOO$-
    ;; #\$, $-in-a-string and $-in-a-comment are not affected
</code></pre>

<h3>license:</h3>

<p>infix-dollar-reader is under MIT license.</p>
