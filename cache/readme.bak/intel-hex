<h1>Intel-hex - A library to handle Intel HEX format.</h1>

<p><a href="https://travis-ci.org/takagi/intel-hex" ><img src="https://travis-ci.org/takagi/intel-hex.svg?branch=master" alt="Build Status" /></a>
<a href="https://coveralls.io/r/takagi/intel-hex?branch=master" ><img src="https://coveralls.io/repos/takagi/intel-hex/badge.svg?branch=master" alt="Coverage Status" /></a></p>

<p>Intel-hex is a library for Common Lisp to handle Intel HEX format, which is a file format that conveys binary information in ASCII text form.</p>

<h2>Usage</h2>

<p>This example shows an Intel HEX file that has four data records followed by an end-of-file record.</p>

<pre><code>:10010000214601360121470136007EFE09D2190140
:100110002146017E17C20001FF5F16002148011928
:10012000194E79234623965778239EDA3F01B2CAA7
:100130003F0156702B5E712B722B732146013421C7
:00000001FF
</code></pre>

<p>To read the file, just call READ-HEX-FROM-FILE function as following and get a byte array.</p>

<pre><code>(intel-hex:read-hex-from-file 512 &quot;/path/to/hex-file.hex&quot;)
=&gt; #(0 0 0 ... #x21 #x46 #x01 ...)
</code></pre>

<h2>Installation</h2>

<p>You can install via Quicklisp.</p>

<pre><code>(ql:quickload :intel-hex)
</code></pre>

<h2>API</h2>

<h3>[Function] read-hex</h3>

<pre><code>READ-HEX size stream =&gt; byte-array
</code></pre>

<p>Reads Intel HEX format from STREAM and returns an array of bytes whose only dimension is SIZE. STREAM should be a character input stream.</p>

<h3>[Function] read-hex-from-file</h3>

<pre><code>READ-HEX-FROM-FILE size filename =&gt; byte-array
</code></pre>

<p>Reads Intel HEX format from a file named FILENAME and returns an array of bytes whose only dimension is SIZE.</p>

<h3>[Function] read-hex-from-string</h3>

<pre><code>READ-HEX-FROM-STRING size string =&gt; byte-array
</code></pre>

<p>Reads Intel HEX format from STRING and returns an array of bytes whose only dimension is SIZE.</p>

<h2>Record Types</h2>

<p>There are fix record types defined in Intel HEX format and their implementation status in the library is as following.</p>

<p>Hex code | Record type | Status
&mdash;&mdash;&mdash;|&mdash;&mdash;&mdash;&mdash;-|&mdash;&mdash;-
&lsquo;00&rsquo; | Data Record | done.
&lsquo;01&rsquo; | End Of File Record | done.
&lsquo;02&rsquo; | Extended Segment Address Record | not implemented.
&lsquo;03&rsquo; | Start Segment Address Record | not implemented.
&lsquo;04&rsquo; | Extended Linear Address Record | done.
&lsquo;05&rsquo; | Start Linear Address Record | not implemented.</p>

<h2>Author</h2>

<ul>
<li>Masayuki Takagi (kamonama@gmail.com)</li>
</ul>

<h2>Copyright</h2>

<p>Copyright (c) 2015 Masayuki Takagi (kamonama@gmail.com)</p>

<h1>License</h1>

<p>Licensed under the MIT License.</p>
