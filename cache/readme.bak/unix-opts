<h1>Unix-style command line options parser</h1>

<p>This is a minimalistic parser of command line options. Main advantage of
this library is ability to concisely define command line options once and
then use this definition for parsing and extraction of command line
arguments, as well as printing description of command line options (you get
<code>--help</code> for free). This way you don&apos;t need to repeat yourself. Also,
<code>unix-opts</code> doesn&apos;t depend on anything and allows to precisely control
behavior of the parser via Common Lisp restarts.</p>

<h2>Installation</h2>

<p>Copy files of this library in any place where ASDF can find them. Then you
can use it in system definitions and ASDF will take care of the rest.</p>

<p>Via Quicklisp:</p>

<pre><code>(ql:quickload "unix-opts")</code></pre>

<h2>Description</h2>

<pre><code>option condition</code></pre>

<p>Take a condition <code>condition</code> (<code>unknown-option</code>, <code>missing-arg</code>, or
<code>arg-parser-failed</code>) and return string representing option in question.</p>

<hr/>

<pre><code>raw-arg condition</code></pre>

<p>Take a condition of type <code>arg-parser-failed</code> and return raw argument string.</p>

<hr/>

<pre><code>define-opts &rest descriptions</code></pre>

<p>Define command line options. Arguments of this macro must be plists
containing various parameters. Here we enumerate all allowed parameters:</p>

<p><code>:name</code> — keyword that will be included in list returned by <code>get-opts</code>
function if actual option is supplied by user.</p>

<p><code>:description</code> — description of the option (it will be used in <code>describe</code>
function). This argument is optional, but it&apos;s recommended to supply it.</p>

<p><code>:short</code> — single character, short variant of the option. You may omit this
argument if you supply <code>:long</code> variant of option.</p>

<p><code>:long</code> — string, long variant of option. You may omit this argument if you
supply <code>:short</code> variant of option.</p>

<p><code>:arg-parser</code> — if actual option must take an argument, supply this
argument, it must be a function that takes a string and parses it.</p>

<p><code>:meta-var</code> — if actual option requires an argument, this is how it will be
printed in option description.</p>

<hr/>

<pre><code>argv</code></pre>

<p>Return list of program&apos;s arguments, including command used to execute the
program as first elements of the list.</p>

<hr/>

<pre><code>get-opts &optional options</code></pre>

<p>Parse command line options. If <code>options</code> is given, it should be a list to
parse. If it&apos;s not given, the function will use <code>argv</code> function to get list
of command line arguments. Return two values: list that contains keywords
associated with command line options with <code>define-opts</code> macro, and list of
free arguments. If some option requires an argument, you can use <code>getf</code> to
test presence of the option and get its argument if the option is present.</p>

<p>The parser may signal various conditions, let&apos;s list them all specifying
which restarts are available for every condition, and what kind of
information the programmer can extract from the conditions.</p>

<p><code>unknown-option</code> is thrown when parser encounters unknown (not previously
defined with <code>define-opts</code>) option. Use <code>option</code> reader to get name of the
option (string). Available restarts: <code>use-value</code> (substitute the option and
try again), <code>skip-option</code> (ignore the option).</p>

<p><code>missing-arg</code> is thrown when some option wants an argument, but there is no
such argument given. Use <code>option</code> reader to get name of the option
(string). Available restarts: <code>use-value</code> (supplied value will be used),
<code>skip-option</code> (ignore the option).</p>

<p><code>arg-parser-failed</code> is thrown when some option wants an argument, it&apos;s given
but cannot be parsed by argument parser. Use <code>option</code> reader to get name of
the option (string) and <code>raw-arg</code> to get raw string representing the
argument before parsing. Available restarts: <code>use-value</code> (supplied value
will be used), <code>skip-option</code> (ignore the option), <code>reparse-arg</code> (supplied
string will be parsed instead).</p>

<hr/>

<pre><code>describe &key prefix suffix usage-of args stream</code></pre>

<p>Return string describing options of the program that were defined with
<code>define-opts</code> macro previously. You can supply <code>prefix</code> and <code>suffix</code>
arguments that will be printed before and after options respectively. If
<code>usage-of</code> is supplied, it should be a string, name of the program for
&ldquo;Usage: &rdquo; section. This section is only printed if this name is given. If
your program takes arguments (apart from options), you can specify how to
print them in &ldquo;Usage: &rdquo; section with <code>args</code> option (should be a string
designator). Output goes to <code>stream</code> (default value is <code>*standard-output*</code>).</p>

<h2>Example</h2>

<p>Go to <code>example</code> directory. Now, you can use <code>example.lisp</code> file to see if
<code>unix-opts</code> is cool enough for you to use. SBCL users can use <code>example.sh</code>
file. Here is some tests:</p>

<pre><code>$ sh example.sh --help
example — program to demonstrate unix-opts library

Usage: example.sh [-h|--help] [-v|--verbose] [-l|--level LEVEL]
                  [-o|--output FILE] [FREE-ARGS]

Available options:
  -h, --help               print this help text
  -v, --verbose            verbose output
  -l, --level LEVEL        the program will run on LEVEL level
  -o, --output FILE        redirect output to file FILE

so that's how it works…
free args:
$ sh example.sh -v file1.txt file2.txt
OK, running in verbose mode…
free args: file1.txt, file2.txt
$ sh example.sh --level 10 --output foo.txt bar.txt
I see you've supplied level option, you want 10 level!
I see you want to output the stuff to "foo.txt"!
free args: bar.txt
$ sh example.sh --level kitty foo.txt
fatal: cannot parse "kitty" as argument of "--level"
free args:
$ sh example.sh --hoola-boola noola.txt
warning: "--hoola-boola" option is unknown!
free args: noola.txt
$ sh example.sh -vgl=10
warning: "-g" option is unknown!
OK, running in verbose mode…
I see you've supplied level option, you want 10 level!
free args:</code></pre>

<p>Take a look at <code>example.lisp</code> and you will see that the library is pretty
sexy! Basically, we have defined all the options just like this:</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">opts:define-opts</span></i>
  <span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="keyword">:help</span>
   <span class="keyword">:description</span> <span class="string">"print this help text"</span>
   <span class="keyword">:short</span> <span class="character">#\h</span>
   <span class="keyword">:long</span> <span class="string">"help"</span></span>)</span>
  <span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="keyword">:verbose</span>
   <span class="keyword">:description</span> <span class="string">"verbose output"</span>
   <span class="keyword">:short</span> <span class="character">#\v</span>
   <span class="keyword">:long</span> <span class="string">"verbose"</span></span>)</span>
  <span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="keyword">:level</span>
   <span class="keyword">:description</span> <span class="string">"the program will run on LEVEL level"</span>
   <span class="keyword">:short</span> <span class="character">#\l</span>
   <span class="keyword">:long</span> <span class="string">"level"</span>
   <span class="keyword">:arg-parser</span> #'parse-integer
   <span class="keyword">:meta-var</span> <span class="string">"LEVEL"</span></span>)</span>
  <span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="keyword">:output</span>
   <span class="keyword">:description</span> <span class="string">"redirect output to file FILE"</span>
   <span class="keyword">:short</span> <span class="character">#\o</span>
   <span class="keyword">:long</span> <span class="string">"output"</span>
   <span class="keyword">:arg-parser</span> #'identity
   <span class="keyword">:meta-var</span> <span class="string">"FILE"</span></span>)</span></span>)</span></span></code></pre>

<h2>License</h2>

<p>Copyright © 2015 Mark Karpov</p>

<p>Distributed under MIT License.</p>
