<p>;;; :FILE-CREATED &lt;Timestamp: #{2011-04-20T16:44:46-04:00Z}#{11163} - by MON&gt;
;;; :FILE unicly/README
;;; ==============================</p>

<p>DESCRIPTION:</p>

<p>Unicly is a Common Lisp library for generation of UUIDs (Universally Unique
Identifiers) as described by RFC 4122.</p>

<p>As of 2011-09-13 Unicly is known to compile on: 
   SBCL 1.47+  (on Linux x86oids) [1]
   CLisp 2.49  (on Linux x86 32)
   LispWorks 6 (Personal on Linux 86 32) [2]</p>

<p>Please do let us know if you can confirm whether Unicly is known to build on
your platform and implementation.</p>

<p>[1] SBCL should build on MacOS providing that sb-impl::<em>default-external-format</em>
    is set to :UTF-8 and :SB-UNICODE is present as a member cl:<em>features</em></p>

<p>[2] See notes below regarding LispWorks optimization opportunities</p>

<p>INSTALLATION:</p>

<p>SHELL&gt; cd /parent/dir/where/you/put/cl-repos/</p>

<p>SHELL&gt; git clone git://github.com/mon-key/unicly.git </p>

<p>SHELL&gt; cd unicly</p>

<p>Unicly is loadable with Quicklisp assuming a directory containing unicly.asd is
present as an element of ASDF:<em>CENTRAL-REGISTRY</em>.</p>

<p>CL-USER&gt; (push #P&ldquo;/parent/dir/where/you/put/cl-repos/unicly/&rdquo; asdf:<em>central-registry</em>)</p>

<p>CL-USER&gt; (quicklisp:quickload &apos;unicly)</p>

<p>Or for the perverse who&apos;d like to see what their lisp can&apos;t optimize away:</p>

<p>CL-USER&gt; (quicklisp:quickload &apos;unicly :verbose t :explain t)</p>

<p>INSTALLATION-ISSUES:</p>

<ul>
<li>SBCL</li>
</ul>

<p>In the past there have been some reports that Unicly will not compile on SBCLs
running under a MacOS due to the presence of the characters &ldquo;▶▶▶&rdquo; in Unicly
docstrings, e.g.:</p>

<p>CL-USER&gt; (code-char #x25b6)
;&rArr; #\BLACK_RIGHT-POINTING_TRIANGLE </p>

<p>We believe this is not MacOS specific but rather a side-effect of the buildtime
environmental variables LOCALE and LC_CTYPE and their influence on value of
sb-impl::<em>default-external-format</em> such that when its value was other than
:UTF-8 the docstrings would not compile.</p>

<p>A Fix for the problem was to ensure that the variable
`sb-impl::<em>default-external-format</em>&apos; evaluated to :UTF-8 and if not to set it to
do so with:</p>

<p>(setf sb-impl::<em>default-external-format</em> :UTF-8)</p>

<p>However this may or may not be an acceptable solution for your application.
As such, as of 2011-09-12 the offending string of &ldquo;▶▶▶&rdquo; characters have been
removed from all Unicly docstrings and we believe that this will no longer pose
a problem.  This said, should you experience compiler decoding errors with
Unicly please do let us know.</p>

<p>Note, when building Unicly on SBCL we assume that your system is Unicode capable
and that :SB-UNICODE is present in <em>features</em> e.g.:</p>

<p>CL-USER&gt; (and (car (member :SB-UNICODE <em>features</em>)) t)
;&rArr; T</p>

<ul>
<li>LISPWORKS</li>
</ul>

<p>Although Unicly system builds on Lispworks there are known deficiencies around
Unicly&apos;s declarations of objects of type CL:CHARACTER and CL:STRING. Unicly is
strongly typed and excessively inlined and some declarations do not make full
use of internal LispWorks character handling around objets of type
lw:simple-character, lw:text-string, etc.  We have made some effort to bridge
the differences but work is ongoing and there are likely myriad opportunities to
make Unicly faster on Lispworks. This said, the work required to get an optimized
Unicly up to speed on LispWorks is not insurmountable but will require input
from capable LispWorks user(s). Some notes are available in unicly/LISPWORKS
Likely further inspection of the manual is required:
 (URL `http://www.lispworks.com/documentation/lw60/LW/html/lw.htm&apos;)
Needless to say, Patches are welcome.</p>

<p>USAGE:</p>

<p>(in-package #:unicly)
;&rArr; #&lt;PACKAGE &ldquo;UNICLY&rdquo;&gt;</p>

<p>As per RFC 4122 &ldquo;Appendix C - Some Name Space IDs&rdquo; the Unicly package exports
four &ldquo;namespaces&rdquo;, these are:</p>

<p>UNICLY&gt; <em>uuid-namespace-dns</em>
;&rArr; 6ba7b810-9dad-11d1-80b4-00c04fd430c8</p>

<p>UNICLY&gt; <em>uuid-namespace-url</em> 
;&rArr; 6ba7b811-9dad-11d1-80b4-00c04fd430c8</p>

<p>UNICLY&gt; <em>uuid-namespace-oid</em>
;&rArr; 6ba7b812-9dad-11d1-80b4-00c04fd430c8</p>

<p>UNICLY&gt; <em>uuid-namespace-x500</em>
;&rArr; 6ba7b814-9dad-11d1-80b4-00c04fd430c8</p>

<p>The above &ldquo;namespaces&rdquo; are &ldquo;canonical&rdquo; in so much as they are presented by the RFC.</p>

<p>Indeed, a common misconception is that the above four namespaces are the <em>only</em>
namespaces one can/should use when working with v3 and v5 uuids.</p>

<p>However, one is free to define any number of other &ldquo;namespaces&rdquo; to contain UUID
objects and one is free to utilize these namespaces as need dictates.</p>

<p>A problem that arises though is how does one create a UUID &ldquo;namespace&rdquo;?
This is a sort of bootstrapping issue.</p>

<p>The RFC 4122 describes a mechanism for creating two types of UUIDs which may
serve as initial &ldquo;namespaces&rdquo; from which one can then generate other types of
UUIDs with reasonable certainty that the UUIDs so generated will remain unique.</p>

<p>The first of these is a v1 or time based UUID. Unicly does not currently provide
an interface for creation of v1 UUIDs.</p>

<p>The second of these is a v4 or random UUID. This is Unicly&apos;s preferred interface
for creation of an initial namespace. </p>

<p>Once one has a handle on an initial UUID namespace that namespace may then be
leveraged to create any number of new UUID namespaces using MAKE-V3-UUID OR
MAKE-V5-UUID. This is a commonly overlooked/misunderstood aspect of RFC 4122!</p>

<p>So, to be clear, the real utility of UUIDs isn&apos;t by way of the more pedestrian
v1 and v4 UUIDs, but rather by utilization of v3 and v5 UUIDs in a manner
similar to that of RDF whereby a namespace is treated as a URI and a name in that
namespace is treated as a URIref. </p>

<p>We can&apos;t overstate this point enough - don&apos;t retstrict use of UUIDs to only the
v1 or v4 forms. Doing so is (by analogy with RDF) equivalent to providing a URI
for every object gererated by a system and then never bothering to reference any
qualified names within that namespace! Or (by analogy with Common Lisp) this is
not unlike defining a package object which doesn&apos;t use any symbols just to get
at its identity, e.g.:</p>

<p>(let ((hex (make-array 16
                        :element-type &lsquo;base-char
                        :initial-contents (list #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                                                #\A #\B #\C #\D #\E #\F)))
       (pkg-name &rsquo;()))
   (loop 
      repeat 32
      for rand = (random 16)
      for rand-char = (aref hex rand)
      collect rand-char into rand-bag
      finally (setf pkg-name (coerce  rand-bag &apos;string)))
   (setf pkg-name
         (package-name  (eval `(defpackage ,pkg-name)))))</p>

<p>In any event, the easiest way to create a new &ldquo;namespace&rdquo; is with MAKE-V4-UUID.
Note, because the v4 uuid is the &ldquo;random&rdquo; UUID when evaluating the following
form your return value will obv. be somewhat different :)</p>

<p>UNICLY&gt; (make-v4-uuid)
;&rArr; 2f20bdfa-cd67-4150-8500-80c94821bbda</p>

<p>Evaluating the above form returns the printed representation of UUID object.</p>

<p>To cache a namespace we need to bind it to a special variable.
Below we use a defparameter form to do this but longer running applications
would probably use CL:DEFVAR or CL:DEFCONSTANT.</p>

<p>The easiest way to persist a UUID object is to bind its printed string
representation. To get the string representation of a UUID we use
UUID-PRINC-TO-STRING.  Note, per RFC 4122 case is significant when the string
representation of a UUID is output, IOW, sticklers should be careful when using
CL printing function which depend on dynamic value of <em>PRINT-CASE</em>!</p>

<p>UNICLY&gt; (defparameter <em>unique-random-namespace</em> 
       (uuid-princ-to-string  (unicly:make-v4-uuid))) 
;&rArr; <em>UNIQUE-RANDOM-NAMESPACE</em></p>

<p>UNICLY&gt; <em>UNIQUE-RANDOM-NAMESPACE</em>
;&rArr; &ldquo;77b84745-ab13-49c6-8fdc-9afaabc51c52&rdquo;</p>

<p>To convert this string back to a UUID use MAKE-UUID-FROM-STRING:</p>

<p>UNICLY&gt; (setf <em>unique-random-namespace</em> 
          (make-uuid-from-string <em>unique-random-namespace</em>))
;&rArr; 77b84745-ab13-49c6-8fdc-9afaabc51c52</p>

<p>UNICLY&gt; <em>unique-random-namespace</em>
;&rArr; 77b84745-ab13-49c6-8fdc-9afaabc51c52</p>

<p>To print a UUID with a URN quailifier use UUID-AS-URN-STRING:</p>

<p>UNICLY&gt; (uuid-as-urn-string nil <em>unique-random-namespace</em>)
;&rArr; &ldquo;urn:uuid:77b84745-ab13-49c6-8fdc-9afaabc51c52&rdquo;</p>

<p>v4 UUIDs are fine so long as you don&apos;t need to persist an objects
identity and simply need a throw away or single session UUID.
Indeed, one could serialize/deserialize v4 UUIDs from a string to object
representation with each session if desired.</p>

<p>However, as indicated above a v4 UUID is best used as a &ldquo;seed-value&rdquo; for
generating a namespace which is unique to your application.</p>

<p>For persistent UUID solutions it is recommended to use MAKE-V5-UUID by
providing a persisted UUID namespace for an object to reside in.</p>

<p>You can make your own fabulous namespace like this:</p>

<p>UNICLY&gt; (defparameter <em>my-fabulous-namespace</em> 
     (make-v5-uuid <em>unique-random-namespace</em> &ldquo;com.bubba.namespace&rdquo;))
;&rArr; <em>MY-FABULOUS-NAMESPACE</em></p>

<p>UNICLY&gt; <em>MY-FABULOUS-NAMESPACE</em>
;&rArr; e5c2a048-863f-5c7d-a894-607070d2d299</p>

<p>Create some objects in the namespace <em>my-fabulous-namespace</em>:</p>

<p>UNICLY&gt; (make-v5-uuid <em>my-fabulous-namespace</em> (namestring (user-homedir-pathname)))
;&rArr; c0f2a167-dae7-55c0-ad57-1d8bad0444d3</p>

<p>UNICLY&gt; (make-v5-uuid <em>my-fabulous-namespace</em> (namestring <em>default-pathname-defaults</em>))
;&rArr; a5ace91c-d657-5f5c-abef-81bbef52d27c</p>

<p>UNICLY&gt; (setf <em>default-pathname-defaults</em> (user-homedir-pathname))
;&rArr; #P&ldquo;/home/you/&rdquo;</p>

<p>You should now find that the UUID for the CL:NAMESTRING of <em>DEFAULT-PATHNAME-DEFAULTS</em>
is the same as that of the namestring of USER-HOMEDIR-PATHNAME:</p>

<p>UNICLY&gt; (make-v5-uuid <em>my-fabulous-namespace</em> (namestring <em>default-pathname-defaults</em>))
;&rArr; c0f2a167-dae7-55c0-ad57-1d8bad0444d3</p>

<p>Note that each object returned by MAKE-V5-UUID has unique identity under CL:EQUALP:</p>

<p>UNICLY&gt; (equalp (make-v5-uuid <em>my-fabulous-namespace</em> (namestring (user-homedir-pathname)))
                (make-v5-uuid <em>my-fabulous-namespace</em> (namestring <em>default-pathname-defaults</em>)))
;&rArr; NIL</p>

<p>To tests equality among two UUIDs (even where their CL:PRINT-OBJECT is
identical) one must first convert the UUID to an intermediary format and compare
the identity of the intermediate formats instead.</p>

<p>One way to do this is test CL:EQUAL for two UUIDs using their string representation:</p>

<p>UNICLY&gt; (equal (uuid-princ-to-string 
         (make-v5-uuid <em>my-fabulous-namespace</em> (namestring (user-homedir-pathname))))
        (uuid-princ-to-string 
         (make-v5-uuid <em>my-fabulous-namespace</em> (namestring <em>default-pathname-defaults</em>))))
;&rArr; T</p>

<p>CL:EQUAL finds the two UUIDs above as having identical string representations.
However, checking string values for object identity is ugly b/c internally UUID
objects are represented as unsigned integer values.</p>

<p>Unicly provides features for comparing UUID representations in various
intermediary formats other than as strings and further below we present some
examples of Unicly&apos;s representations of UUIDs in forms other than strings and
illustrate some cleaner ways to interrogate UUID equality.</p>

<p>So, now that you&apos;ve got a handle on a fabulous UUID namespace how do you persist it?
The quick and dirty way is to write the UUID string representation of
<em>my-fabulous-namespace</em> to a file somewhere.</p>

<p>UNICLY&gt; (with-open-file (persist (make-pathname :directory &apos;(:absolute &ldquo;tmp&rdquo;) 
                                                :name &ldquo;persisted-fabulous-namespace&rdquo;
                                                :type &ldquo;uuid&rdquo;)
                                 :direction :output
                                 :if-exists :supersede
                                 :if-does-not-exist :create)
          ;; Here we CL:PRIN1 the UUID string representation.
      ;; This is for illustrative purposes, there are other ways.
          (prin1 <em>MY-FABULOUS-NAMESPACE</em>  persist))
;&rArr; &ldquo;e5c2a048-863f-5c7d-a894-607070d2d299&rdquo;</p>

<p>UNICLY&gt; (setf <em>my-fabulous-namespace</em> nil)
;&rArr; NIL</p>

<p>To restore the string representation of the persisted UUID into the
<em>my-fabulous-namespace</em> variable just read in the contents of the file:</p>

<p>UNICLY&gt; (with-open-file (persist (make-pathname :directory
                                                &apos;(:absolute &ldquo;tmp&rdquo;)
                                                :name &ldquo;persisted-fabulous-namespace&rdquo;
                                                :type &ldquo;uuid&rdquo;)
                                 :direction :input
                                 :if-does-not-exist :error)
          (setf <em>my-fabulous-namespace</em> 
                (make-uuid-from-string (read-line  persist))))
;&rArr; e5c2a048-863f-5c7d-a894-607070d2d299</p>

<p>When serialzing/deserializing large numbers of UUIDs it may be more expedient to
use other intermediary representations of your UUIDs. Unicly provides interfaces
for reading, writing, and converting UUIDs across various representations
including bit-vectors, byte-arrays, 128-bit integers, strings, etc.</p>

<p>Following examples illustrate some more of the Unicly interface.</p>

<p>We use the value of the v4-uuid in the variable <em>unique-random-namespace</em>
defined earlier above, but feel free to substitute <em>my-fabulous-namespace</em> (or
equivalent).</p>

<p>Testing the equivalence of two UUID objects:</p>

<p>UNICLY&gt; (uuid-eql 
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;)
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
;&rArr; T</p>

<p>Printing a UUID object in hex-string-36 format:</p>

<p>UNICLY&gt; (uuid-princ-to-string (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
;&rArr; &ldquo;065944a4-7566-53b2-811b-11a20e0bfed2&rdquo;</p>

<p>Testing equivalence of two UUID objects where the first is generated using
MAKE-V5-UUID and the second is generated from an equivelent hex-string-36
representation:</p>

<p>UNICLY&gt; (uuid-eql 
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;)
         (make-uuid-from-string &ldquo;065944a4-7566-53b2-811b-11a20e0bfed2&rdquo;))
;&rArr; T</p>

<p>Binding a variable <em>another-unique-random-namespace</em> for use as a namespace.
We initally bind it to the hex-string-36 representation of a v4 UUID:</p>

<p>UNICLY&gt; (defparameter <em>another-unique-random-namespace</em> 
          (uuid-princ-to-string (unicly:make-v4-uuid)))
;&rArr; <em>ANOTHER-UNIQUE-RANDOM-NAMESPACE</em></p>

<p>Binding the <em>another-unique-random-namespace</em> variable to a UUID object:
UNICLY&gt; (setf <em>another-unique-random-namespace</em>
              (make-uuid-from-string <em>another-unique-random-namespace</em>))
;&rArr; f65c8371-0c41-4913-96e6-8a917666aa51</p>

<p>Creating a container to hold 32 v5 UUIDs for 16 names each of which will occupy
two distinct namespaces:</p>

<p>UNICLY&gt; (defparameter <em>v5-uuids-in-distinct-unique-random-namespaces</em> &apos;()) 
;&rArr; <em>V5-UUIDS-IN-DISTINCT-UNIQUE-RANDOM-NAMESPACES</em></p>

<p>Adding 32 v5 UUIDS to the container where each is a cons with the head of each
cons a UUID object and the tail the name of some object in a namespace.
For each name we create two UUIDs one will occupy the namespace
<em>unique-random-namespace</em> the other will occupy the namepsace
<em>another-unique-random-namespace</em>:</p>

<p>UNICLY&gt; (loop
           initially (setf <em>v5-uuids-in-distinct-unique-random-namespaces</em> nil)
           for bubba in (loop
                           for cnt from 0 below 16<br/>
                           collect (format nil &ldquo;bubba-~D&rdquo; cnt))
           do (push (cons (make-v5-uuid <em>unique-random-namespace</em>  bubba) bubba)
                    <em>v5-uuids-in-distinct-unique-random-namespaces</em>)
           (push (cons (make-v5-uuid <em>another-unique-random-namespace</em> bubba) bubba)
                 <em>v5-uuids-in-distinct-unique-random-namespaces</em>)
           finally (return <em>v5-uuids-in-distinct-unique-random-namespaces</em> ))</p>

<p>;&rArr; ((7c34b05e-d7a0-573e-baa2-7cc407532609 . &ldquo;bubba-15&rdquo;)
;     (f7922a16-0b67-5329-87c9-71fdaa52c6c1 . &ldquo;bubba-15&rdquo;)
;     { &hellip; }
;     (7af9b747-e1f4-59b1-8f05-0acb70220817 . &ldquo;bubba-0&rdquo;)
;     (f3228291-0a24-5a46-a9e2-7963d4671069 . &ldquo;bubba-0&rdquo;))</p>

<p>Retrieving the UUID for the name &ldquo;bubba-8&rdquo; in the namespace
<em>unique-random-namespace</em>:</p>

<p>UNICLY&gt; (assoc 
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba-8&rdquo;)
         <em>v5-uuids-in-distinct-unique-random-namespaces</em>
         :test #&apos;uuid-eql)
;&rArr; (8e64c855-70fd-5d53-82ce-67e545f724a1 . &ldquo;bubba-8&rdquo;)</p>

<p>Retrieving the UUID for the name &ldquo;bubba-8&rdquo; in the namespace
<em>another-unique-random-namespace</em>:</p>

<p>UNICLY&gt; (assoc 
         (make-v5-uuid <em>another-unique-random-namespace</em> &ldquo;bubba-8&rdquo;)
         <em>v5-uuids-in-distinct-unique-random-namespaces</em>
         :test #&apos;uuid-eql)
;&rArr; (ef74e326-4ecc-5edc-9b55-e69e6069610a . &ldquo;bubba-8&rdquo;)</p>

<p>Testing if two identical names can be UUID-EQL when each occupies a different
namespace:
UNICLY&gt; (uuid-eql 
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba-8&rdquo;)
         (make-v5-uuid <em>another-unique-random-namespace</em> &ldquo;bubba-8&rdquo;))
;&rArr; NIL</p>

<p>Testing if two identical names can be UUID-EQL when each occupies the same
namespace:</p>

<p>UNICLY&gt; (uuid-eql 
         (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba-8&rdquo;)
         (car (assoc 
               (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba-8&rdquo;)
               <em>v5-uuids-in-distinct-unique-random-namespaces</em>
               :test #&apos;uuid-eql)))
;&rArr; T</p>

<p>Examining the bit-vector representation of the <em>unique-random-namespace</em> UUID:</p>

<p>UNICLY&gt; (uuid-to-bit-vector <em>unique-random-namespace</em>)
;&rArr; #*01110111101110000100011101000101101010110001001101001001110001101000111111011100100110101111101010101011110001010001110001010010</p>

<p>Testing with UNIQUE-UNIVERSAL-IDENTIFIER-P whether the value of
<em>unique-random-namespace</em> is an instance of class UNIQUE-UNIVERSAL-IDENTIFIER:</p>

<p>UNICLY&gt; (unique-universal-identifier-p <em>unique-random-namespace</em>)
;&rArr; T</p>

<p>When testing an object with UNIQUE-UNIVERSAL-IDENTIFIER-P if the object is a
bit-vector and the form of that bit-vector satisfies UUID-BIT-VECTOR-128-P and
the appropriate version bit of the bit-vector is set, indication is given that
the bit-vector may be coerceable to an object which would satisfy
UNIQUE-UNIVERSAL-IDENTIFIER-P. This indication is provided as the CL:NTH-VALUE 1
as illustrated by the following return value:</p>

<p>UNICLY&gt; (unique-universal-identifier-p (uuid-to-bit-vector <em>unique-random-namespace</em>))
;&rArr; NIL, (UUID-BIT-VECTOR-128 4)</p>

<p>Testing whether the null-uuid satisfies UNIQUE-UNIVERSAL-IDENTIFIER-P:</p>

<p>UNICLY&gt; (unique-universal-identifier-p (make-null-uuid))
;&rArr; T</p>

<p>Converting a UUID to bit-vector representation with UUID-TO-BIT-VECTOR then
converting that to an integer value with UUID-BIT-VECTOR-TO-INTEGER:</p>

<p>UNICLY&gt; (uuid-bit-vector-to-integer (uuid-to-bit-vector <em>unique-random-namespace</em>))
;&rArr; 159134959691145724577639637335874542674</p>

<p>Converting a UUID to byte-array reresentation with UNICLY::UUID-TO-BYTE-ARRAY:</p>

<p>UNICLY&gt; (unicly::uuid-to-byte-array <em>unique-random-namespace</em>)
;&rArr; #(119 184 71 69 171 19 73 198 143 220 154 250 171 197 28 82)</p>

<p>Converting a UUID to byte-array reresentation with UNICLY::UUID-TO-BYTE-ARRAY
then converting that to a bit-vector:</p>

<p>UNICLY&gt; (uuid-byte-array-to-bit-vector (unicly::uuid-to-byte-array <em>unique-random-namespace</em>))
;&rArr; #*01110111101110000100011101000101101010110001001101001001110001101000111111011100100110101111101010101011110001010001110001010010</p>

<p>Note, above when converting the UUID object to a byte-array we used the internal
symbol UNICLY::UUID-TO-BYTE-ARRAY however the preferred interface for retrieving
the byte-array representation of a UUID object is UUID:GET-NAMESPACE-BYTES.  The
symbol UNICLY::UUID-TO-BYTE-ARRAY is not exported by Unicly b/c its
implementation conflicts with UUID:UUID-TO-BYTE-ARRAY (the two functions access
differently named slot values of their respective base classes
UNICLY:UNIQUE-UNIVERSAL-IDENTIFIER vs. UUID:UUID).</p>

<p>Testing if a UUID object is UUID-EQL to itself:</p>

<p>UNICLY&gt; (uuid-eql <em>unique-random-namespace</em> <em>unique-random-namespace</em>)
;&rArr; T</p>

<p>Testing if a UUID object is UUID-EQL to its bit-vector representation:</p>

<p>UNICLY&gt; (uuid-eql <em>unique-random-namespace</em> (uuid-to-bit-vector <em>unique-random-namespace</em>))
;&rArr; T</p>

<p>Testing if a UUID object is UUID-EQL to a copy of itself as per UUID-COPY-UUID:</p>

<p>UNICLY&gt; (let ((copy (uuid-copy-uuid <em>unique-random-namespace</em>)))
          (uuid-eql copy <em>unique-random-namespace</em>))
;&rArr; T</p>

<p>Testing if a UUID object is UUID-EQL to its byte-array representation.
Note, this is likely to change in future versions!</p>

<p>UNICLY&gt; (uuid-eql (uuid-to-byte-array <em>unique-random-namespace</em>)
                  <em>unique-random-namespace</em>)
;&rArr; NIL</p>

<p>Testing if two UUID bit-vector representations are UUID-BIT-VECTOR-EQL:</p>

<p>UNICLY&gt; (uuid-bit-vector-eql 
         (uuid-to-bit-vector <em>unique-random-namespace</em>)
         (uuid-byte-array-to-bit-vector (unicly::uuid-to-byte-array <em>unique-random-namespace</em>)))
;&rArr;T</p>

<p>Testing if two UUID bit-vector representations are UUID-EQL:</p>

<p>UNICLY&gt; (uuid-eql 
         (uuid-to-bit-vector <em>unique-random-namespace</em>)
         (uuid-byte-array-to-bit-vector (unicly::uuid-to-byte-array <em>unique-random-namespace</em>)))
;&rArr; T</p>

<p>Note, we can also test if two UUID bit-vector representations are CL:EQUAL.
We can not do the same for two UUID byte-array representations, instead we must
use CL:EQUALP:</p>

<p>UNICLY&gt; (equal
         (uuid-to-bit-vector (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
         (uuid-to-bit-vector (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))) 
;&rArr; T</p>

<p>UNICLY&gt; (equal
         (uuid-to-bit-vector (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
         (uuid-to-bit-vector (make-v5-uuid <em>unique-random-namespace</em> &ldquo;NOT-A-bubba&rdquo;)))
;&rArr; NIL</p>

<p>UNICLY&gt; (equal
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;)))
;&rArr; NIL</p>

<p>UNICLY&gt; (equalp
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;)))
;&rArr; T</p>

<p>UNICLY&gt; (equalp
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba&rdquo;))
         (uuid-get-namespace-bytes (make-v5-uuid <em>unique-random-namespace</em> &ldquo;NOT-A-BUBBA&rdquo;)))
;&rArr; NIL</p>

<p>Roundtripping UUID representations:
 uuid &rarr; bit-vector &rarr; uuid &rarr; byte-array &rarr; bit-vector &rarr; uuid 
  &rarr; byte-array &rarr; uuid &rarr; uuid-string-36 &rarr; uuid</p>

<p>First we verify the identity of the name &ldquo;bubba&rdquo; in the <em>uuid-namespace-dns</em>
namespace:</p>

<p>UNICLY&gt; (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)
;&rArr; eea1105e-3681-5117-99b6-7b2b5fe1f3c7</p>

<p>Does the roundtripping return an equivalent object?:</p>

<p>UNICLY&gt; (make-uuid-from-string
         (uuid-princ-to-string
          (uuid-from-byte-array
           (uuid-to-byte-array
            (uuid-from-bit-vector
             (uuid-byte-array-to-bit-vector
              (uuid-to-byte-array 
               (uuid-from-bit-vector 
                (uuid-to-bit-vector 
                 (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;))))))))))
;&rArr; eea1105e-3681-5117-99b6-7b2b5fe1f3c7</p>

<p>Comparing return value of UUID-EQL with CL builtin operators CL:EQ, CL:EQL,
CL:EQUAL, CL:EQUALP, and CL:SXHASH:</p>

<p>UNICLY&gt; (let* ((uuid-1    (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;))
               (uuid-1-bv (uuid-to-bit-vector (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)))
               (uuid-2    (uuid-from-bit-vector uuid-1-bv)))
          (list :uuid-eql (uuid-eql uuid-1 uuid-2)
                :eq       (eq uuid-1 uuid-2)
                :eql      (eql uuid-1 uuid-2) 
                :equal    (equal uuid-1 uuid-2)
                :equalp   (equalp uuid-1 uuid-2)
                :sxhash   (list (sxhash uuid-1) (sxhash uuid-2))))
;&rArr; (:UUID-EQL T :EQ NIL :EQL NIL :EQUAL NIL :EQUALP NIL :SXHASH (121011444 363948070))</p>

<p>Get the integer version of a UUID object:</p>

<p>UNICLY&gt; (uuid-version-uuid <em>unique-random-namespace</em>)
;&rArr; 4</p>

<p>UNICLY&gt; (uuid-version-uuid (make-v5-uuid <em>unique-random-namespace</em> &ldquo;bubba-8&rdquo;))
;&rArr; 5</p>

<p>Using a predicate to test the version of a UUID object:</p>

<p>UNICLY&gt; (uuid-bit-vector-v4-p (uuid-to-bit-vector <em>unique-random-namespace</em>))
;&rArr; T</p>

<p>UNICLY&gt; (uuid-bit-vector-v5-p (uuid-to-bit-vector <em>unique-random-namespace</em>))
;&rArr; NIL</p>

<p>Generating an instance of the null-uuid:</p>

<p>UNICLY&gt; (make-null-uuid)
;&rArr; 00000000-0000-0000-0000-000000000000</p>

<p>(Note, some special mojo occurs behind the curtains to ensure unique identity
for the null-uuid b/c the CL:SXHASH of the null-uuid is an intransient value).</p>

<p>MAKE-NULL-UUID is the preferred interface for accessing the null-uuid, we can
test if its return-value is an instance of class
UNIQUE-UNIVERSAL-IDENTIFIER-NULL with UNIQUE-UNIVERSAL-IDENTIFIER-NULL-P:</p>

<p>UNICLY&gt; (unique-universal-identifier-null-p (make-null-uuid))
;&rArr; T</p>

<p>Get the version of the null-uuid. Note, the CL:NTH-VALUE 1 can be checked to
verify that every bit of the UUID object is 0 (as opposed to an object with a
partial bit signature at bits 48-51 mimicing that of the null-uuid):</p>

<p>UNICLY&gt; (uuid-version-uuid (make-null-uuid))
;&rArr;  0, UNICLY::NULL-UUID</p>

<p>Testing if the null-uuid is UUID-EQL to itself:</p>

<p>UNICLY&gt; (uuid-eql (make-null-uuid) (make-null-uuid))
;&rArr; T</p>

<p>The UUID is sometimes referenced as having an 8:4:4:4:12 hex string representation. 
We refer to this representation as a UUID object with type UUID-HEX-STRING-36.</p>

<p>However, such references imply a string-centric view-point of the UUID when
really it is much saner to see the uuid as a sequence of bits or bytes.</p>

<p>Following table illustrates the components of a UUID as a bit/byte field. 
Note, it will not display correctly in a text-editor word/line wrapping is
enabled and/or your display is unable to lines of render text out to 140 columns
:{</p>

<p>The UUID as bit field:</p>

<p>WEIGHT   INDEX      OCTETS                     BIT-FIELD-PER-OCTET
    4  | (0  31)  | 255 255 255 255         | #<em>11111111 #</em>11111111 #<em>11111111 #</em>11111111  | %uuid_time-low               | uuid-ub32
    2  | (32 47)  | 255 255                 | #<em>11111111 #</em>11111111                        | %uuid_time-mid               | uuid-ub16
    2  | (48 63)  | 255 255                 | #<em>11111111 #</em>11111111                        | %uuid_time-high-and-version  | uuid-ub16
    1  | (64 71)  | 255                     | #<em>11111111                                   | %uuid_clock-seq-and-reserved | uuid-ub8
    1  | (72 79)  | 255                     | #</em>11111111                                   | %uuid_clock-seq-low          | uuid-ub8
    6  | (80 127) | 255 255 255 255 255 255 | #<em>11111111 #</em>11111111 #<em>11111111 #</em>11111111 #<em>11111111 #</em>11111111 | %uuid_node | uuid-ub48</p>

<p>The UUIDs bit-vector representation:</p>

<p>UNICLY&gt; (uuid-to-bit-vector (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;))
;&rArr; #*11101110101000010001000001011110001101101000000101010001000101111001100110110110011110110010101101011111111000011111001111000111
;     !      !       !       !       !       !       !       !        !      !       !       !       !       !       !       !       !<br/>
;     0      7       15      23      31      39      47      55       63     71      79      87      95      103     111     119     127
;      &ndash;1&ndash;   &ndash;2&ndash;   &ndash;3&ndash;   &ndash;4&ndash;   &ndash;5&ndash;   &ndash;6&ndash;   &ndash;7&ndash;    &ndash;8&ndash;   &ndash;9&ndash;   -10-   -11-     -12-    -13-    -14-    -15-    -16-<br/>
;     |  time-low slot               | time-mid slot | time-high slot | rsvd |  low  |                node slot                      |</p>

<p>The UUIDs binary integer representation:</p>

<p>UNICLY&gt; #b11101110101000010001000001011110001101101000000101010001000101111001100110110110011110110010101101011111111000011111001111000111
;&rArr; 317192554773903544674993329975922389959</p>

<p>The byte-array reresentation of a UUIDs integer representation:</p>

<p>UNICLY&gt; (uuid-integer-128-to-byte-array 317192554773903544674993329975922389959)
;&rArr; #(238 161 16 94 54 129 81 23 153 182 123 43 95 225 243 199)</p>

<p>UNICLY&gt; (uuid-to-byte-array (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;))
;&rArr; #(238 161 16 94 54 129 81 23 153 182 123 43 95 225 243 199)</p>

<p>The component octet bit-vector reresentation of a UUID:</p>

<p>UNICLY&gt; (map &apos;list #&apos;uuid-octet-to-bit-vector-8
             (uuid-to-byte-array (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)))
;&rArr; (#<em>11101110 #</em>10100001 #<em>00010000 #</em>01011110 #<em>00110110 #</em>10000001 #<em>01010001 #</em>00010111 
;    #<em>10011001 #</em>10110110 #<em>01111011 #</em>00101011 #<em>01011111 #</em>11100001 #<em>11110011 #</em>11000111)</p>

<p>Converting from UUID &rarr; byte-array &rarr; bit-vector:</p>

<p>UNICLY&gt; (uuid-byte-array-to-bit-vector (uuid-to-byte-array (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)))
;&rArr; #*11101110101000010001000001011110001101101000000101010001000101111001100110110110011110110010101101011111111000011111001111000111</p>

<p>The upper bounds of a UUID in binary integer representation:</p>

<p>UNICLY&gt; #b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
;&rArr; 340282366920938463463374607431768211455</p>

<p>The number of unsigned bits used to represent the upper bounds of a UUIDs
integer representation:</p>

<p>UNICLY&gt; (integer-length 340282366920938463463374607431768211455) 
;&rArr; 128</p>

<p>The octet count of the upper bounds of a UUIDs integer representation:</p>

<p>UNICLY&gt; (truncate (integer-length 340282366920938463463374607431768211455) 8)
;&rArr; 16</p>

<p>The upper bounds of UUID in decimal integer representation (longform):</p>

<p>UNICLY&gt; (format t &ldquo;~R&rdquo; 340282366920938463463374607431768211455)
;&rArr; three hundred forty undecillion two hundred eighty-two decillion three hundred
;   sixty-six nonillion nine hundred twenty octillion nine hundred thirty-eight
;   septillion four hundred sixty-three sextillion four hundred sixty-three
;   quintillion three hundred seventy-four quadrillion six hundred seven trillion
;   four hundred thirty-one billion seven hundred sixty-eight million two hundred
;   eleven thousand four hundred fifty-five</p>

<p>Converting from a UUID bit-vector representation to an integer:</p>

<p>UNICLY&gt; (uuid-bit-vector-to-integer (uuid-to-bit-vector (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)))
;&rArr; 317192554773903544674993329975922389959</p>

<p>Converting from a UUID byte-array representation to an integer:</p>

<p>UNICLY&gt; (uuid-integer-128-to-byte-array 317192554773903544674993329975922389959)
;&rArr; #(238 161 16 94 54 129 81 23 153 182 123 43 95 225 243 199)</p>

<p>Converting from a UUID byte-array representation to a  UUID integer representation:</p>

<p>UNICLY&gt; (uuid-byte-array-16-to-integer 
         (uuid-integer-128-to-byte-array 317192554773903544674993329975922389959))
;&rArr; 317192554773903544674993329975922389959</p>

<p>Converting from a UUID integer representation to a UUID bit-vector representation:</p>

<p>UNICLY&gt; (uuid-integer-128-to-bit-vector 317192554773903544674993329975922389959)
;&rArr; #*11101110101000010001000001011110001101101000000101010001000101111001100110110110011110110010101101011111111000011111001111000111</p>

<p>Testing if two UUIDs are UUID-BIT-VECTOR-EQL where the first is coerced to a
bit-vector from a UUID object and the second is coerced to a bit-vector from a
UUID integer representation:</p>

<p>UNICLY&gt; (uuid-bit-vector-eql (uuid-to-bit-vector (make-v5-uuid <em>uuid-namespace-dns</em> &ldquo;bubba&rdquo;)) 
                             (uuid-integer-128-to-bit-vector 317192554773903544674993329975922389959))
;&rArr; T</p>

<p>Testing if two UUIDs are UUID-BIT-VECTOR-EQL where the first is coerced to a
bit-vector from UUID integer representation and the second is coerced to a
bit-vector from a UUID byte-array representation:</p>

<p>UNICLY&gt; (uuid-bit-vector-eql (uuid-integer-128-to-bit-vector 317192554773903544674993329975922389959)
                             (uuid-byte-array-to-bit-vector (uuid-integer-128-to-byte-array 317192554773903544674993329975922389959)))
;&rArr; T</p>

<p>Differences between the Unicly system and the uuid system:</p>

<p>Unicly has a similar interface to Boian Tzonev&apos;s Common Lisp library uuid: 
 :SEE (URL `https://github.com/dardoria/uuid&apos;)</p>

<p>Indeed, the core of Unicly is derived from Tzonev&apos;s uuid codebase.</p>

<p>However, Unicly deviates in some not insignificant ways from Tzonev&apos;s uuid and
while we have made some attempt to create a compatibility layer between the two
libraries the UUID objects generated with Unicly can not be used interchangeably
with those of Tzonev&apos;s uuid.</p>

<p>Some notable differences between Unicly and Tzonev&apos;s uuid:</p>

<ul>
<li><p>Unicly is developed on SBCL </p></li>
<li><p>Many routines are targeted towards making use of SBCL specific features.</p></li>
<li><p>It is highly declaration bound and inlined.</p></li>
<li><p>I do not test on implementations other than SBCL, but code for generating
 v3, v4, and v5 UUIDs <em>should</em> run portably on other Common Lisps ;}</p></li>
<li><p>Unicly is developed primarily for speedy minting of v3 and v5 UUIDs.
   On an x86-32 SBCL we have found Unicly&apos;s minting of v3 and v5 UUIDs to be
   significantly faster (at least 3-5x) than equivalent code from uuid.
   See unicly/unicly-timings.lisp for some timing comparisons.</p></li>
<li><p>Unicly is not particlulary faster than uuid when minting v4 UUIDS. 
   This is to be expected as both systems depend on frobbing <em>random-state</em>
   and there is little room for optimization beyond some internal declarations.</p></li>
<li><p>Unicly does however have different performace characteristcs when comparing
   timings of UNICLY:MAKE-V5-UUID with UUID:MAKE-V5-UUID. </p></li>
</ul>

<p>Following timings were made using functionally identical namespaces for 1mil
   invocations on an x86-32 SBCL.</p>

<p>Name components were taken from an array of 1mil elements where each element was
   a randomly generated string and where each string was between 1-36 characters long
   and where each character of the string was a randomly chosen UTF-8 characater
   (pulled from a constrained set of 360). With each invocation having the basic form:</p>

<pre><code>(unicly:make-v5-uuid &lt;NAMESPACE&gt; &lt;RANDOM-NAME&gt;)
(uuid:make-v5-uuid &lt;NAMESPACE&gt; &lt;RANDOM-NAME&gt;)

unicly:make-v5-uuid 
 18.251 seconds of real time
 54,614,814,653 processor cycles
 961,242,536 bytes consed
</code></pre>

<p>uuid:make-v5-uuid
     57.404 seconds of real time
     171,781,583,768 processor cycles
     5,356,186,536 bytes consed</p>

<p>The above ratios are similar for the equivalent MAKE-V3-UUID functions.</p>

<p>Other significant performace differences can be seen between Unicly and uuid
   around the respective system&apos;s UUID-TO-BYTE-ARRAY, UUID-FROM-BYTE-ARRAY,
   MAKE-UUID-FROM-STRING functions.</p>

<p>However, Unicly&apos;s biggest performance gains don&apos;t become apparent until using
   Unicly for equivalence tests and hash-table lookups using Unicly&apos;s extended
   interface as provided by UUID-EQL, UUID-BIT-VECTOR-EQL, etc.</p>

<ul>
<li><p>Unicly is extended with support for creating/storing/(de)serializing UUID
   objects as bit vectors.</p></li>
<li><p>For persistence libraries which make use of hash-tables to store their keys
 as UUID objects in hex-string-36 representation there are some potentially big
 gains to be had by moving to a bit-vector base UUID representation.</p>

<p>For example, on SBCL it is possible to SB-EXT:DEFINE-HASH-TABLE-TEST which
 tests for UUID bit-vector equivalence using UUID-BIT-VECTOR-EQL instead of
 CL:EQUAL and CL:EQUALP.
 (Underneath the covers UUID-BIT-VECTOR-EQL invokes SB-INT:BIT-VECTOR-=
  A nearly equivalent routine is provided for other CLs)</p></li>
<li><p>Unicly is extended with support for preserving identity of the null-uuid.
   This feature is specified in RFC 4122.</p></li>
<li><p>Unicly prints UUID string representations in case-significant form.
   This feature is specified in RFC 4122 Section 3. &ldquo;Namespace Registration Template&rdquo;
   as follows:</p>

<p>,&mdash;-
| The hexadecimal values &ldquo;a&rdquo; through &ldquo;f&rdquo; are output as lower case characters
| and are case insensitive on input.
`&mdash;-</p></li>
<li><p>Unicly defines its base UUID class as UNIQUE-UNIVERSAL-IDENTIFIER instead of
   as the class UUID.</p></li>
<li><p>Unicly does not expose accessors for the slots of the UUID class
   UNIQUE-UNIVERSAL-IDENTIFIER.</p></li>
<li><p>Unicly slot-names for the base class UNIQUE-UNIVERSAL-IDENTIFIER are strongly
   namespaced with &ldquo;%uuid_&rdquo;. This intent here is twofold:</p></li>
<li><p>Our opinion is that UUID identity should be considered immutable once minted.
 There should be no need for user code to directly modify a UUIDs slot
 values. Obfuscating easy access to the class slots of
 UNIQUE-UNIVERSAL-IDENTIFIER helps prevent this.</p>

<ul>
<li>Because the Unicly interface is similar to that of the uuid library we&apos;ve
  attempted to prevent trivial visual namespace collision with the slots of
  the uuid library.  Projects using both Unicly and the uuid library may
  benefit from being able to easily distinguish among the two.</li>
</ul></li>
<li><p>Unicly&apos;s printing of a UUIDs string representation is not always conformant
   with ANSI spec.</p>

<ul>
<li>The UUID CL:PRINT-OBJECT method for the class UNIQUE-UNIVERSAL-IDENTIFIER is
  not wrapped around PRINT-UNREADABLE-OBJECT.</li>
</ul></li>
<li><p>Unicly&apos;s interface is extensively documented.</p></li>
<li><p>Unicly&apos;s source-code is commented with references to the relevant portions of
   RFC 4122.</p></li>
<li><p>Unicly does not have a dependency on trivial-utf-8</p></li>
<li><p>SBCL users can use internal features (assuming a Unicode enabled SBCL)</p></li>
<li><p>non-SBCL code can (and should) use flexi-streams instead </p></li>
<li><p>Unicly is not released under an LLGPL licenses.</p></li>
<li><p>If licensing issues are a concern in your project please take a moment to
 investigate unicly/LICENSE.txt</p>

<p>Although Unicly is initially derived from Tzonev&apos;s uuid library we note that
significant portions of that library were in turn strongly derived from the
non-normative reference implementation source code included of RFC4122 Appendix
C as a wholly functional C language source code implementation of RFC4122.</p>

<p>We believe the original RFC reference implementation and license have clear
precedent in lieu of the later LLGPL and believe it reasonable to revert to the
spirit of the original permissive and non-LLGPL&apos;d license included of RFC4122.</p></li>
<li><p>Unicly is not targeted for generation of version 1 UUIDs (e.g. time based).</p></li>
</ul>

<p>The general implementation strategy for minting v1 UUID is reliant on
   interrogation of the system&apos;s underlying hardware and clock setting [1].
   When this is the strategy taken we have found that:</p>

<pre><code>* It requires platform and implementation specific code;

* Minting version 1 UUIDs requires interrogating the MAC address of an
  Ethernet device;

* Minting version 1 UUIDs requires interrogating the system clock -- there
  are in general some notoriously nasty bugs which spring from reliance on
  the value of the system clock e.g. cross-platform multi-boot systems...

* Minting version 1 UUIDs is slow;

* There is no portably universal mechanism for generation of version 1 UUIDs
  Some implementations use the hardware for seed value others use a random-number.

* The uniqueness of version 1 UUIDs is not nearly as robust as the v3, v4,
  v5 variants. There are numerous mechanisms by which a v1 UUID can
  become corrupted which simply do not affect the others.
</code></pre>

<p>[1]  RFC 4122 Section 4.5 &ldquo;Node IDs that Do Not Identify the Host&rdquo;
   Suggests that a v1 UUID may also be minted from a &ldquo;47-bit cryptographic
   quality random number&rdquo; by using it as the bottom 47 bits of the UUID Node id
   and setting the LSB of the first octet of the UUID node id to 1.
   Unfortunately, when attempting to implement this alternative strategy we found that
   Tzonev&apos;s uuid library has what we believe to be a bug in uuid:get-node-id in
   that it sets bit 0 of the the LS-Byte of a 48bit integer with:</p>

<pre><code> (setf node (dpb #b01 (byte 8 0) (random #xffffffffffff *random-state-uuid*)))
</code></pre>

<p>Apparently, there is some confusion around the RFC&apos;s reference to the
   unicast/multicast bit, instead of the arguably more correct local/global bit.</p>

<p>As it is now, when using Tzonev&apos;s uuid one can not reliably inspect a v1 UUID
   for its version because the bits are in the wrong sequence and disambiguation
   of of the various v1, v2, v3, v4, and v5 UUIDs is impossible.</p>

<p>:SEE unicly/unicly-compat.lisp for additional details/discussion.</p>

<p>We could attempt to accommodate this and propagate the error onward or do the
   prudent thing and simply rely on v3, v4, v5 UUIDs instead.</p>

<p>Examples of Common Lisp libraries which make use of UUIDs:</p>

<p>(URL <code>https://raw.github.com/kraison/vivace-graph-v2/master/triples.lisp')
(URL</code>https://raw.github.com/lisp/de.setf.resource/master/resource-object.lisp&apos;)
(URL <code>https://raw.github.com/dto/blocky/master/prototypes.lisp')
(URL</code>https://raw.github.com/fons/cl-mongo/master/src/bson-oid.lisp&apos;)
(URL `git://github.com/kraison/kyoto-persistence.git&apos;)</p>

<p>An Emacs lisp implementation of RFC 4122 UUID generation:</p>

<p>(URL `https://github.com/kanru/uuid-el&apos;)</p>

<p>RFC 4122:</p>

<p>(URL <code>http://www.ietf.org/rfc/rfc4122.txt')
(URL</code>http://tools.ietf.org/pdf/rfc4122&apos;)</p>

<p>;;; ==============================
;;; EOF</p>
