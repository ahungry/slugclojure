<h1>lisp-interface-library</h1>

<p>LIL: abstract interfaces and concrete data structures in Common Lisp</p>

<ul>
<li><p>Home Page:
<a href="http://github.com/fare/lisp-interface-library/">http://github.com/fare/lisp-interface-library/</a></p></li>
<li><p>We wrote an article explaining about our library for ILC&apos;2012:
<a href="http://github.com/fare/lil-ilc2012/">http://github.com/fare/lil-ilc2012/</a></p></li>
<li><p>A PDF of a slightly corrected version of the article is here:
<a href="http://common-lisp.net/~frideau/lil-ilc2012/lil-ilc2012.pdf">http://common-lisp.net/~frideau/lil-ilc2012/lil-ilc2012.pdf</a></p></li>
<li><p>An HTML of that version of the article is here:
<a href="http://common-lisp.net/~frideau/lil-ilc2012/lil-ilc2012.html">http://common-lisp.net/~frideau/lil-ilc2012/lil-ilc2012.html</a></p></li>
<li><p>A short introduction on our &ldquo;Interface-Passing Style&rdquo; of programming, is also at:
<a href="http://fare.livejournal.com/155094.html">http://fare.livejournal.com/155094.html</a></p></li>
<li><p>Manual: I have never worked on a manual, nor on a tutorial.
   For a quick introduction to how things work, look at the tests in <a href="test/" >test/</a>
   for a few examples.
   Then docstrings and source code can get you somewhat further.
   A manual or a tutorial would be a great contribution to this library.</p></li>
</ul>

<h2>Features</h2>

<ul>
<li><p>LIL nicely combines ad-hoc polymorphism (CLOS-powered object oriented programming)
   and parametric polymorphism (as in ML functors, C++ templates, etc.).
   To our knowledge, only scalaz matches the expressiveness of LIL.</p></li>
<li><p>LIL sports both pure (persistent, immutable) and
   stateful (ephemeral, mutable) variants
   of data structures in Interface-Passing Style.
   This variants are in the respective packages PURE and STATEFUL;
   a common core is shared in package INTERFACE, covering read-only operations;
   automatic transforms allow bridging from stateful to pure and back.</p></li>
<li><p>LIL supports data structures in traditional Object-Oriented Style,
   in both stateful (the usual Object-Oriented kind) and pure variants,
   in the respective packages POSH and CLASSY.
   There too, automatic transforms to go from Interface-Passing Style to
   traditional Object-Oriented Style and back.</p></li>
</ul>

<h2>Building it</h2>

<p>LIL needs to be built using <a href="https://common-lisp.net/project/asdf/" >ASDF</a> 3.1 or later:</p>

<p>Indeed, LIL notably relies on ASDF 3.1&apos;s <code>package-inferred-system</code>.
whereby instead of dependencies being listed in a central .asd file,
each source file has a defpackage form from which the dependencies are deduced.
While we think it&apos;s a great way to write Lisp code,
you don&apos;t have to use it in your own code to use LIL.</p>

<p>LIL also depends on
<a href="https://gitlab.common-lisp.net/frideau/fare-utils" >fare-utils</a>,
<a href="https://gitlab.common-lisp.net/frideau/fare-memoization" >fare-memoization</a>,
<a href="http://cliki.net/closer-mop" >closer-mop</a>,
<a href="https://gitlab.common-lisp.net/alexandria/alexandria" >alexandria</a>.</p>

<h2>Using it</h2>

<p>See <a href="test/pure-map.lisp" >test/pure-map.lisp</a> and <a href="test/stateful-map.lisp" >test/stateful-map.lisp</a>
for examples of how to use LIL.
Unhappily, no one is working on documentation at this time.</p>
