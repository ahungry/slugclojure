<h1>Jonathan</h1>

<p><a href="https://circleci.com/gh/Rudolph-Miller/jonathan" ><img src="https://circleci.com/gh/Rudolph-Miller/jonathan.svg?style=shield" alt="Build Status" /></a>
<a href="https://coveralls.io/r/Rudolph-Miller/jonathan?branch=master" ><img src="https://coveralls.io/repos/Rudolph-Miller/jonathan/badge.svg?branch=master" alt="Coverage Status" /></a></p>

<p>JSON encoder and decoder.<br/>
It&apos;s faster than <a href="https://github.com/madnificent/jsown" >jsown</a> - high performance Common Lisp json parser.</p>

<p>See <a href="http://rudolph-miller.github.io/jonathan/overview.html" >Document</a>.<br/>
This HTML is generated by <a href="https://github.com/CommonDoc/codex" >Codex</a>.</p>

<h2>Usage</h2>

<pre><code><span class="code"><span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="string">"Common Lisp"</span> <span class="keyword">:born</span> 1984 <span class="keyword">:impls</span> <span class="paren3">(<span class="code">SBCL KCL</span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"Common Lisp\",\"BORN\":1984,\"IMPLS\":[\"SBCL\",\"KCL\"]}"
</span>
<span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="string">"Common Lisp"</span> <span class="keyword">:born</span> 1984 <span class="keyword">:impls</span> <span class="paren3">(<span class="code">SBCL KCL</span>)</span></span>)</span>
         <span class="keyword">:octets</span> t</span>)</span>
<span class="comment">;; =&gt; #(123 34 78 65 77 69 34 58 34 67 111 109 109 111 110 32 76 ...)
</span>
<span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="paren3">(<span class="code"><span class="keyword">:name</span> . <span class="string">"Common Lisp"</span></span>)</span> <span class="paren3">(<span class="code"><span class="keyword">:born</span> . 1984</span>)</span> <span class="paren3">(<span class="code"><span class="keyword">:impls</span> SBCL KCL</span>)</span></span>)</span>
         <span class="keyword">:from</span> <span class="keyword">:alist</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"Common Lisp\",\"BORN\":1984,\"IMPLS\":[\"SBCL\",\"KCL\"]}"
</span>
<span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="keyword">:obj</span> <span class="paren3">(<span class="code"><span class="keyword">:name</span> . <span class="string">"Common Lisp"</span></span>)</span> <span class="paren3">(<span class="code"><span class="keyword">:born</span> . 1984</span>)</span> <span class="paren3">(<span class="code"><span class="keyword">:impls</span> SBCL KCL</span>)</span></span>)</span>
         <span class="keyword">:from</span> <span class="keyword">:jsown</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"Common Lisp\",\"BORN\":1984,\"IMPLS\":[\"SBCL\",\"KCL\"]}"
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">encoder <span class="paren4">(<span class="code">compile-encoder <span class="paren5">(<span class="code"><span class="keyword">:from</span> <span class="keyword">:alist</span></span>)</span> <span class="paren5">(<span class="code">name</span>)</span>
                 `<span class="paren5">(<span class="code"><span class="paren6">(<span class="code"><span class="string">"name"</span> . ,name</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">funcall encoder <span class="string">"Rudolph"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"name\":\"Rudolph\"}"
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">NAME</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">Common Lisp</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">BORN</span><span class="string">\"</span><span class="string">:1984,</span><span class="string">\"</span><span class="string">IMPLS</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">SBCL</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">KCL</span><span class="string">\"</span><span class="string">]}"</span></span>)</span>
<span class="comment">;; =&gt; (:NAME "Common Lisp" :BORN 1984 :IMPLS ("SBCL" "CCL" "KCL"))
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">NAME</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">Common Lisp</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">BORN</span><span class="string">\"</span><span class="string">:1984,</span><span class="string">\"</span><span class="string">IMPLS</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">SBCL</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">KCL</span><span class="string">\"</span><span class="string">]}"</span>
       <span class="keyword">:as</span> <span class="keyword">:alist</span></span>)</span>
<span class="comment">;; =&gt; (("NAME" . "Common Lisp") ("BORN" . 1984) ("IMPLS" "SBCL" "CCL" "KCL"))
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">NAME</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">Common Lisp</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">BORN</span><span class="string">\"</span><span class="string">:1984,</span><span class="string">\"</span><span class="string">IMPLS</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">SBCL</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">KCL</span><span class="string">\"</span><span class="string">]}"</span>
       <span class="keyword">:as</span> <span class="keyword">:jsown</span></span>)</span>
<span class="comment">;; =&gt; (:obj ("NAME" . "Common Lisp") ("BORN" . 1984) ("IMPLS" "SBCL" "CCL" "KCL"))
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">NAME</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">Common Lisp</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">BORN</span><span class="string">\"</span><span class="string">:1984,</span><span class="string">\"</span><span class="string">IMPLS</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">SBCL</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">KCL</span><span class="string">\"</span><span class="string">]}"</span>
       <span class="keyword">:as</span> <span class="keyword">:hash-table</span></span>)</span>
<span class="comment">;; =&gt; #&lt;HASH-TABLE :TEST EQUAL :COUNT 3&gt;</span></span></code></pre>

<h2>Installasion</h2>

<pre><code><span class="code"><span class="paren1">(<span class="code">ql:quickload <span class="keyword">:jonathan</span></span>)</span></span></code></pre>

<h2>to-json</h2>

<ul>
<li>can encode Object into JSON format.</li>
<li>Rstricted Property List. (<code>:from :plist</code>)</li>
<li>Association List. (<code>:from :alist</code>)</li>
<li>Jsown Object. (<code>:from :jsown</code>)</li>
<li>can return not only string but also octets.</li>
<li>can be compiled by compiler-macro.</li>
</ul>

<pre><code><span class="code"><span class="comment">;; Restricted Property List Samples
</span><span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="keyword">:age</span> <span class="keyword">:born</span> <span class="keyword">:impls</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"AGE\",\"BORN\":\"IMPLS\"}"
</span><span class="comment">;; not "[\"NAME\",\"AGE\",\"BORN\",\"IMPLS\"]"
</span>
<span class="paren1">(<span class="code">to-json '<span class="paren2">(<span class="code"><span class="keyword">:name</span> <span class="string">"Common Lisp"</span> <span class="keyword">:born</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"Common Lisp\",\"BORN\":[]}"</span></span></code></pre>

<ul>
<li>is customizable by <code>%to-json</code>, <code>%write-char</code> and <code>%write-string</code>.</li>
</ul>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defclass</span></i> user <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">id <span class="keyword">:type</span> integer <span class="keyword">:initarg</span> <span class="keyword">:id</span></span>)</span>
   <span class="paren3">(<span class="code">name <span class="keyword">:type</span> string <span class="keyword">:initarg</span> <span class="keyword">:name</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defmethod</span></i> %to-json <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">user user</span>)</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-object</span></i>
    <span class="paren3">(<span class="code">write-key-value <span class="string">"id"</span> <span class="paren4">(<span class="code">slot-value user 'id</span>)</span></span>)</span>
    <span class="paren3">(<span class="code">write-key-value <span class="string">"name"</span> <span class="paren4">(<span class="code">slot-value user 'name</span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code">to-json <span class="paren2">(<span class="code">make-instance 'user <span class="keyword">:id</span> 1 <span class="keyword">:name</span> <span class="string">"Rudolph"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"id\":1,\"name\":\"Rudolph\"}"</span></span></code></pre>

<p><img src="./images/1.to-json.png" alt="Benchmark of to-json" /></p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">post <span class="paren4">(<span class="code">compile-encoder <span class="paren5">(<span class="code"></span>)</span> <span class="paren5">(<span class="code">text</span>)</span>
               <span class="paren5">(<span class="code">list <span class="keyword">:|channel|</span> <span class="string">"lisp-alien"</span>
                     <span class="keyword">:|username|</span> <span class="string">"alien-bot"</span>
                     <span class="keyword">:|text|</span> text
                     <span class="keyword">:|icon_url|</span> <span class="string">"http://www.lisperati.com/lisplogo_warning2_256.png"</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">funcall post <span class="string">"Post from Alien!"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.095
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">flet</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">post <span class="paren4">(<span class="code">text</span>)</span>
         <span class="paren4">(<span class="code">jonathan:to-json
               <span class="paren5">(<span class="code">list <span class="keyword">:|channel|</span> <span class="string">"lisp-alien"</span>
                     <span class="keyword">:|username|</span> <span class="string">"alien-bot"</span>
                     <span class="keyword">:|text|</span> text
                     <span class="keyword">:|icon_url|</span> <span class="string">"http://www.lisperati.com/lisplogo_warning2_256.png"</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">post <span class="string">"Post from Alien!"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.095
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">flet</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">post <span class="paren4">(<span class="code">text</span>)</span>
         <span class="paren4">(<span class="code">format nil <span class="string">"{</span><span class="string">\"</span><span class="string">channel</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">lisp-alien</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">username</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">alien-bot</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">text</span><span class="string">\"</span><span class="string">:~s,</span><span class="string">\"</span><span class="string">icon_url</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">http://www.lisperati.com/lisplogo_warning2_256.png</span><span class="string">\"</span><span class="string">}"</span> text</span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">post <span class="string">"Post from Alien!"</span></span>)</span></span>)</span></span>)</span></span>)</span>"\"}"))))
<span class="comment">;; =&gt; 0.146
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">flet</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">post <span class="paren4">(<span class="code">text</span>)</span>
         <span class="paren4">(<span class="code">jonathan:to-json
               <span class="paren5">(<span class="code">list <span class="keyword">:|channel|</span> <span class="string">"lisp-alien"</span>
                     <span class="keyword">:|username|</span> <span class="string">"alien-bot"</span>
                     <span class="keyword">:|text|</span> text
                     <span class="keyword">:|icon_url|</span> <span class="string">"http://www.lisperati.com/lisplogo_warning2_256.png"</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">post <span class="string">"Post from Alien!"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.604 - without compiler-macro.
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">flet</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">post <span class="paren4">(<span class="code">text</span>)</span>
         <span class="paren4">(<span class="code">jsown:to-json
          `<span class="paren5">(<span class="code"><span class="keyword">:obj</span> <span class="paren6">(<span class="code"><span class="keyword">:|channel|</span> . <span class="string">"lisp-alien"</span></span>)</span>
                 <span class="paren6">(<span class="code"><span class="keyword">:|username|</span> . <span class="string">"alien-bot"</span></span>)</span>
                 <span class="paren6">(<span class="code"><span class="keyword">:|text|</span> . ,text</span>)</span>
                 <span class="paren6">(<span class="code"><span class="keyword">:|icon_url|</span> . <span class="string">"http://www.lisperati.com/lisplogo_warning2_256.png"</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">post <span class="string">"Post from Alien!"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 1.117</span></span></code></pre>

<h2>parse</h2>

<ul>
<li>can decode JSON format string into Object.</li>
<li>Property List. (<code>:as :plist</code>)</li>
<li>Association List. (<code>:as :alist</code>)</li>
<li>Json Object. (<code>:as :jsown</code>)</li>
<li>Hash Table. (<code>:as :hash-table</code>)</li>
<li>can allow junked JSON format string (<code>:junk-allowed t</code>)</li>
<li>can customize <code>*null-value*</code>, <code>*false-value*</code> and <code>*empty-array-value*</code>.</li>
<li>can restrict keywords to read. (<code>:keywords-to-read</code>)</li>
<li>can normalize keywords. (<code>:keyword-normalizer</code>)</li>
<li>can not normalize keywords in nested objects.</li>
<li>can ignore keywords when normalizer returns NIL.</li>
</ul>

<pre><code><span class="code"><span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">key</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">}"</span></span>)</span>
<span class="comment">;; =&gt; (:|key| "value")
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">key</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">"</span></span>)</span>
<span class="comment">;; =&gt; raise &lt;jonathan-unexpected-eof&gt;.
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">key</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">"</span> <span class="keyword">:junk-allowed</span> t</span>)</span>
<span class="comment">;; =&gt; (:|key| "value")
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code"><span class="special">*null-value*</span> <span class="keyword">:null</span></span>)</span>
      <span class="paren3">(<span class="code"><span class="special">*false-value*</span> <span class="keyword">:false</span></span>)</span>
      <span class="paren3">(<span class="code"><span class="special">*empty-array-value*</span> <span class="keyword">:</span>[]</span>)</span></span>)</span>
  <span class="paren2">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">null</span><span class="string">\"</span><span class="string">:null,</span><span class="string">\"</span><span class="string">false</span><span class="string">\"</span><span class="string">:false,</span><span class="string">\"</span><span class="string">empty</span><span class="string">\"</span><span class="string">:[]}"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; (:|null| :NULL :|false| :FALSE :|empty| :[])
</span>
<span class="paren1">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value1</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value2</span><span class="string">\"</span><span class="string">}"</span> <span class="keyword">:keywords-to-read</span> '<span class="paren2">(<span class="code"><span class="string">"key1"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; (:|key1| "value1")
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">flet</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">normalizer <span class="paren4">(<span class="code">key</span>)</span>
         <span class="paren4">(<span class="code"><i><span class="symbol">with-vector-parsing</span></i> <span class="paren5">(<span class="code">key</span>)</span>
           <span class="paren5">(<span class="code">match-i-case
             <span class="paren6">(<span class="code"><span class="string">"key1"</span> <span class="paren1">(<span class="code"><i><span class="symbol">return-from</span></i> normalizer <span class="string">"other-key"</span></span>)</span></span>)</span>
             <span class="paren6">(<span class="code">otherwise <span class="paren1">(<span class="code"><i><span class="symbol">return-from</span></i> normalizer nil</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">parse <span class="string">"{</span><span class="string">\"</span><span class="string">KEY1</span><span class="string">\"</span><span class="string">:{</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value2</span><span class="string">\"</span><span class="string">},</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value3</span><span class="string">\"</span><span class="string">}"</span>
         <span class="keyword">:keyword-normalizer</span> #'normalizer</span>)</span></span>)</span>
<span class="comment">;; =&gt; (:|other-key| (:|key2| "value2"))</span></span></code></pre>

<p><img src="./images/2.parse.png" alt="Benchmark of parse" /></p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jonathan:parse s <span class="keyword">:as</span> <span class="keyword">:alist</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.174
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jonathan:parse s <span class="keyword">:as</span> <span class="keyword">:jsown</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.181
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jsown:parse s</span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.204</span></span></code></pre>

<p><img src="./images/3.parse-partially.png" alt="Benchmark of parse partially" /></p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jonathan:parse s <span class="keyword">:as</span> <span class="keyword">:alist</span> <span class="keyword">:keywords-to-read</span> '<span class="paren5">(<span class="code"><span class="string">"key1"</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.065
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jonathan:parse s <span class="keyword">:as</span> <span class="keyword">:jsown</span> <span class="keyword">:keywords-to-read</span> '<span class="paren5">(<span class="code"><span class="string">"key1"</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.069
</span>
<span class="paren1">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">s <span class="string">"{</span><span class="string">\"</span><span class="string">key1</span><span class="string">\"</span><span class="string">:</span><span class="string">\"</span><span class="string">value</span><span class="string">\"</span><span class="string">,</span><span class="string">\"</span><span class="string">key2</span><span class="string">\"</span><span class="string">:1.1,</span><span class="string">\"</span><span class="string">key3</span><span class="string">\"</span><span class="string">:[</span><span class="string">\"</span><span class="string">Hello</span><span class="string">\"</span><span class="string">,1.2]}"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">time
   <span class="paren3">(<span class="code">dotimes <span class="paren4">(<span class="code">_ 100000</span>)</span>
     <span class="paren4">(<span class="code">jsown:parse s <span class="string">"key1"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; 0.085</span></span></code></pre>

<h2>Helper</h2>

<h3>compile-encoder</h3>

<ul>
<li>can compile encoder.</li>
</ul>

<pre><code><span class="code"><span class="paren1">(<span class="code">compile-encoder <span class="paren2">(<span class="code"></span>)</span> <span class="paren2">(<span class="code">name</span>)</span>
  <span class="paren2">(<span class="code">list <span class="keyword">:name</span> name</span>)</span></span>)</span>
<span class="comment">;; =&gt; #&lt;FUNCTION (LAMBDA (name))&gt;
</span>
<span class="paren1">(<span class="code">funcall * <span class="string">"Rudolph"</span></span>)</span>
<span class="comment">;; =&gt; "{\"NAME\":\"Rudolph\"}"
</span>
<span class="paren1">(<span class="code">compile-encoder <span class="paren2">(<span class="code"><span class="keyword">:from</span> <span class="keyword">:alist</span></span>)</span> <span class="paren2">(<span class="code">name</span>)</span>
  `<span class="paren2">(<span class="code"><span class="paren3">(<span class="code"><span class="string">"name"</span> . ,name</span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; #&lt;FUNCTION (LAMBDA (name))&gt;
</span>
<span class="paren1">(<span class="code">funcall * <span class="string">"Rudolph"</span></span>)</span>
<span class="comment">;; =&gt; "{\"name\":\"Rudolph\"}"
</span>
<span class="paren1">(<span class="code">compile-encoder <span class="paren2">(<span class="code"><span class="keyword">:octets</span> t</span>)</span> <span class="paren2">(<span class="code">name</span>)</span>
  <span class="paren2">(<span class="code">list <span class="keyword">:name</span> name</span>)</span></span>)</span>
<span class="comment">;; =&gt; #&lt;FUNCTION (LAMBDA (name))&gt;
</span>
<span class="paren1">(<span class="code">funcall * <span class="string">"Rudolph"</span></span>)</span>
<span class="comment">;; =&gt; #(123 34 75 69 89 49 ...)</span></span></code></pre>

<h3>with-object</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defclass</span></i> user <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">id <span class="keyword">:initarg</span> <span class="keyword">:id</span></span>)</span>
   <span class="paren3">(<span class="code">name <span class="keyword">:initarg</span> <span class="keyword">:name</span></span>)</span></span>)</span></span>)</span>
   
<span class="paren1">(<span class="code"><i><span class="symbol">defmethod</span></i> %to-json <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">user user</span>)</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-object</span></i>
    <span class="paren3">(<span class="code">write-key <span class="string">"id"</span></span>)</span>
    <span class="paren3">(<span class="code">write-value <span class="paren4">(<span class="code">slot-value user 'id</span>)</span></span>)</span>
    <span class="paren3">(<span class="code">write-key-value <span class="string">"name"</span> <span class="paren4">(<span class="code">slot-value user 'name</span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code">to-json <span class="paren2">(<span class="code">make-instance 'user <span class="keyword">:id</span> 1 <span class="keyword">:name</span> <span class="string">"Rudolph"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"id\":1,\"name\":\"Rudolph\"}"</span></span></code></pre>

<h3>with-array</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defclass</span></i> user <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">id <span class="keyword">:initarg</span> <span class="keyword">:id</span></span>)</span>
   <span class="paren3">(<span class="code">name <span class="keyword">:initarg</span> <span class="keyword">:name</span></span>)</span></span>)</span></span>)</span>
   
<span class="paren1">(<span class="code"><i><span class="symbol">defmethod</span></i> %to-json <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">user user</span>)</span></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-array</span></i>
    <span class="paren3">(<span class="code">write-item <span class="string">"id"</span></span>)</span>
    <span class="paren3">(<span class="code">write-item <span class="paren4">(<span class="code">slot-value user 'id</span>)</span></span>)</span>
    <span class="paren3">(<span class="code">write-item <span class="string">"name"</span></span>)</span>
    <span class="paren3">(<span class="code">write-item <span class="paren4">(<span class="code">slot-value user 'name</span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code">to-json <span class="paren2">(<span class="code">make-instance 'user <span class="keyword">:id</span> 1 <span class="keyword">:name</span> <span class="string">"Rudolph"</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "[\"id\",1,\"name\",\"Rudolph\"]"</span></span></code></pre>

<h3>with-output</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">with-output-to-string</span></i> <span class="paren2">(<span class="code">stream</span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-output</span></i> <span class="paren3">(<span class="code">stream</span>)</span>
    <span class="paren3">(<span class="code"><i><span class="symbol">with-object</span></i>
      <span class="paren4">(<span class="code">write-key-value <span class="string">"key"</span> <span class="string">"value"</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;; =&gt; "{\"key\":\"value\"}"</span></span></code></pre>

<h3>with-output-to-string*</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">with-output-to-string*</span></i>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-object</span></i>
    <span class="paren3">(<span class="code">write-key-value <span class="string">"key"</span> <span class="string">"value"</span></span>)</span></span>)</span></span>)</span>)
<span class="comment">;; =&gt; "{\"key\":\"value\"}"</span></span></code></pre>

<h2>See Also</h2>

<ul>
<li><a href="https://github.com/fukamachi/proc-parse" >proc-parse</a></li>
</ul>

<h2>Author</h2>

<ul>
<li>Rudolph-Miller</li>
</ul>

<h2>Copyright</h2>

<p>Copyright (c) 2015 Rudolph-Miller</p>
