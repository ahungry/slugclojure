<h1>Caveman2 - Lightweight web application framework</h1>

<p><a href="https://travis-ci.org/fukamachi/caveman" ><img src="https://travis-ci.org/fukamachi/caveman.svg?branch=master" alt="Build Status" /></a></p>

<h2>Usage</h2>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defparameter</span></i> <span class="special">*web*</span> <span class="paren2">(<span class="code">make-instance '&lt;app&gt;</span>)</span></span>)</span>

@route GET "/"
<span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> index <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-layout</span></i> <span class="paren3">(<span class="code"><span class="keyword">:title</span> <span class="string">"Welcome to My site"</span></span>)</span>
    <span class="paren3">(<span class="code">render #P<span class="string">"index.tmpl"</span></span>)</span></span>)</span></span>)</span>

@route GET "/hello"
<span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> say-hello <span class="paren2">(<span class="code">&amp;key <span class="paren3">(<span class="code">|name| <span class="string">"Guest"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"Hello, ~A"</span> |name|</span>)</span></span>)</span></span></code></pre>

<h2>About Caveman2</h2>

<h3>What&apos;s the difference from Caveman &ldquo;1&rdquo;?</h3>

<p>All of them. Caveman2 was written from scratch.</p>

<p>These are noticeable points.</p>

<ul>
<li>Bases on <a href="http://8arrow.org/ningle/" >ningle</a></li>
<li>Database integration</li>
<li>New separated configuration system (<a href="https://github.com/fukamachi/envy" >Envy</a>)</li>
<li>New routing macro</li>
</ul>

<h3>The reason I wrote it from scratch</h3>

<p>One of the most frequently asked questions was &ldquo;Which should I use ningle or Caveman? What are the differences?&rdquo; I think it was because the roles of them were too similar. Both of them are saying &ldquo;micro&rdquo; and no database support.</p>

<p>Caveman2 is no more &ldquo;micro&rdquo; web application framework. It supports CL-DBI and has database connection management by default. Caveman has started growing up.</p>

<h2>Design Goal</h2>

<p>Caveman is intended to be a collection of common parts of web applications. Caveman has 3 rules to make decisions.</p>

<ul>
<li>Be extensible.</li>
<li>Be practical.</li>
<li>Don&apos;t force anything.</li>
</ul>

<h2>Quickstart</h2>

<p>You came here because you&apos;re interested in living like a caveman, right? There&apos;s no Disneyland, but it&apos;s good place to start. Let&apos;s get into a cave.</p>

<h3>Installation</h3>

<p>Caveman2 is now available on <a href="https://www.quicklisp.org/beta/" >Quicklisp</a>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">ql:quickload <span class="keyword">:caveman2</span></span>)</span></span></code></pre>

<h3>Generating a project skeleton</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code">caveman2:make-project #P<span class="string">"/path/to/myapp/"</span>
                       <span class="keyword">:author</span> <span class="string">"&lt;Your full name&gt;"</span></span>)</span>
<span class="comment">;-&gt; writing /path/to/myapp/.gitignore
</span><span class="comment">;   writing /path/to/myapp/README.markdown
</span><span class="comment">;   writing /path/to/myapp/app.lisp
</span><span class="comment">;   writing /path/to/myapp/db/schema.sql
</span><span class="comment">;   writing /path/to/myapp/shlyfile.lisp
</span><span class="comment">;   writing /path/to/myapp/myapp-test.asd
</span><span class="comment">;   writing /path/to/myapp/myapp.asd
</span><span class="comment">;   writing /path/to/myapp/src/config.lisp
</span><span class="comment">;   writing /path/to/myapp/src/db.lisp
</span><span class="comment">;   writing /path/to/myapp/src/main.lisp
</span><span class="comment">;   writing /path/to/myapp/src/view.lisp
</span><span class="comment">;   writing /path/to/myapp/src/web.lisp
</span><span class="comment">;   writing /path/to/myapp/static/css/main.css
</span><span class="comment">;   writing /path/to/myapp/t/myapp.lisp
</span><span class="comment">;   writing /path/to/myapp/templates/_errors/404.html
</span><span class="comment">;   writing /path/to/myapp/templates/index.tmpl
</span><span class="comment">;   writing /path/to/myapp/templates/layout/default.tmpl</span></span></code></pre>

<h3>Routing</h3>

<p>Caveman2 provides 2 ways to define a route &ndash; <code>@route</code> and <code>defroute</code>. You can choose which to use.</p>

<p><code>@route</code> is an annotation macro defined by using <a href="https://github.com/arielnetworks/cl-annot" >cl-annot</a>. It takes a method, an URL-string and a function.</p>

<pre><code><span class="code">@route GET "/"
<span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> index <span class="paren2">(<span class="code"></span>)</span>
  ...</span>)</span>

<span class="comment">;; A route with no name.
</span>@route GET "/welcome"
<span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code">&amp;key <span class="paren3">(<span class="code">|name| <span class="string">"Guest"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"Welcome, ~A"</span> |name|</span>)</span></span>)</span></span></code></pre>

<p>This is similar to Caveman1&apos;s <code>@url</code> except its argument list. You don&apos;t have to specify an argument when you don&apos;t need it.</p>

<p><code>defroute</code> is just a macro. It provides same feature to <code>@route</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> index <span class="string">"/"</span> <span class="paren2">(<span class="code"></span>)</span>
  ...</span>)</span>

<span class="comment">;; A route with no name.
</span><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/welcome"</span> <span class="paren2">(<span class="code">&amp;key <span class="paren3">(<span class="code">|name| <span class="string">"Guest"</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"Welcome, ~A"</span> |name|</span>)</span></span>)</span></span></code></pre>

<p>Since Caveman bases on ningle, Caveman also has the <a href="http://www.sinatrarb.com/" >Sinatra</a>-like routing system.</p>

<pre><code><span class="code"><span class="comment">;; GET request (default)
</span>@route GET "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:GET</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>

<span class="comment">;; POST request
</span>@route POST "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:POST</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>

<span class="comment">;; PUT request
</span>@route PUT "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:PUT</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>

<span class="comment">;; DELETE request
</span>@route DELETE "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:DELETE</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>

<span class="comment">;; OPTIONS request
</span>@route OPTIONS "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:OPTIONS</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>

<span class="comment">;; For all methods
</span>@route ANY "/" <span class="paren1">(<span class="code"><i><span class="symbol">lambda</span></i> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/"</span> <span class="keyword">:method</span> <span class="keyword">:ANY</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span></span></code></pre>

<p>Route pattern may contain &ldquo;keyword&rdquo; to put the value into the argument.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/hello/:name"</span> <span class="paren2">(<span class="code">&amp;key name</span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"Hello, ~A"</span> name</span>)</span></span>)</span></span></code></pre>

<p>The above controller will be invoked when you access to &ldquo;/hello/Eitaro&rdquo; or &ldquo;/hello/Tomohiro&rdquo;, and then <code>name</code> will be &ldquo;Eitaro&rdquo; and &ldquo;Tomohiro&rdquo;.</p>

<p><code>(&amp;key name)</code> is almost same as a lambda list of Common Lisp, excepts it always allows other keys.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/hello/:name"</span> <span class="paren2">(<span class="code">&amp;rest params &amp;key name</span>)</span>
  <span class="comment">;; ...
</span>  </span>)</span></span></code></pre>

<p>Route patterns may also contain &ldquo;wildcard&rdquo; parameters. They are accessible by <code>splat</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/say/*/to/*"</span> <span class="paren2">(<span class="code">&amp;key splat</span>)</span>
  <span class="comment">; matches /say/hello/to/world
</span>  splat <span class="comment">;=&gt; ("hello" "world")
</span>  </span>)</span>)

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/download/*.*"</span> <span class="paren2">(<span class="code">&amp;key splat</span>)</span>
  <span class="comment">; matches /download/path/to/file.xml
</span>  splat <span class="comment">;=&gt; ("path/to/file" "xml")
</span>  </span>)</span>)</span></code></pre>

<p>If you&apos;d like to write a regular expression for URL rule, <code>:regexp t</code> should work for it.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/hello/([</span><span class="string">\\</span><span class="string">w]+)"</span> <span class="keyword">:regexp</span> t</span>)</span> <span class="paren2">(<span class="code">&amp;key captures</span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"Hello, ~A!"</span> <span class="paren3">(<span class="code">first captures</span>)</span></span>)</span></span>)</span></span></code></pre>

<p>Normally, routes are matched in the order they are defined. Only the first route matched is invoked and rest of them just will be ignored. But, a route can punt processing to the next matching route using <code>next-route</code>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/guess/:who"</span> <span class="paren2">(<span class="code">&amp;key who</span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">if</span></i> <span class="paren3">(<span class="code">string= who <span class="string">"Eitaro"</span></span>)</span>
      <span class="string">"You got me!"</span>
      <span class="paren3">(<span class="code">next-route</span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/guess/*"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="string">"You missed!"</span></span>)</span></span></code></pre>

<p>You can return following formats as the result of <code>defroute</code>.</p>

<ul>
<li>String</li>
<li>Pathname</li>
<li>Clack&apos;s response list (containing Status, Headers and Body)</li>
</ul>

<h3>Structured query/post parameters</h3>

<p>Parameter keys contain square brackets (&ldquo;[&ldquo; &amp; &rdquo;]&rdquo;) will be parsed as structured parameters. You can access the parsed parameters as <code>_parsed</code> in routers.</p>

<pre><code>&lt;form action="/edit"&gt;
  &lt;input type="name" name="person[name]" /&gt;
  &lt;input type="name" name="person[email]" /&gt;
  &lt;input type="name" name="person[birth][year]" /&gt;
  &lt;input type="name" name="person[birth][month]" /&gt;
  &lt;input type="name" name="person[birth][day]" /&gt;
&lt;/form&gt;</code></pre>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/edit"</span> <span class="paren2">(<span class="code">&amp;key _parsed</span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"~S"</span> <span class="paren3">(<span class="code">cdr <span class="paren4">(<span class="code">assoc <span class="string">"person"</span> _parsed <span class="keyword">:test</span> #'string=</span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;=&gt; "((\"name\" . \"Eitaro\") (\"email\" . \"e.arrows@gmail.com\") (\"birth\" . ((\"year\" . 2000) (\"month\" . 1) (\"day\" . 1))))"</span></span></code></pre>

<p>Blank keys mean they have multiple values.</p>

<pre><code>&lt;form action="/add"&gt;
  &lt;input type="text" name="items[][name]" /&gt;
  &lt;input type="text" name="items[][price]" /&gt;

  &lt;input type="text" name="items[][name]" /&gt;
  &lt;input type="text" name="items[][price]" /&gt;

  &lt;input type="submit" value="Add" /&gt;
&lt;/form&gt;</code></pre>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/add"</span> <span class="paren2">(<span class="code">&amp;key _parsed</span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"~S"</span> <span class="paren3">(<span class="code">assoc <span class="string">"items"</span> _parsed <span class="keyword">:test</span> #'string=</span>)</span></span>)</span></span>)</span>
<span class="comment">;=&gt; "(((\"name\" . \"WiiU\") (\"price\" . \"30000\")) ((\"name\" . \"PS4\") (\"price\" . \"69000\")))"</span></span></code></pre>

<h3>Templates</h3>

<p>Caveman adopts <a href="http://mmontone.github.io/djula/" >Djula</a> for the default templating engine.</p>

<pre><code>{% extends "layouts/default.html" %}
{% block title %}Users | MyApp{% endblock %}
{% block content %}
&lt;div id="main"&gt;
  &lt;ul&gt;
  {% for user in users %}
    &lt;li&gt;&lt;a href="{{ user.url }}"&gt;{{ user.name }}&lt;/a&gt;&lt;/li&gt;
  {% endfor %}
  &lt;/ul&gt;
&lt;/div&gt;
{% endblock %}</code></pre>

<pre><code><span class="code"><span class="paren1">(<span class="code">import 'myapp.view:render</span>)</span>

<span class="paren1">(<span class="code">render #P<span class="string">"users.html"</span>
        '<span class="paren2">(<span class="code"><span class="keyword">:users</span> <span class="paren3">(<span class="code"><span class="paren4">(<span class="code"><span class="keyword">:url</span> <span class="string">"/id/1"</span>
                   <span class="keyword">:name</span> <span class="string">"nitro_idiot"</span></span>)</span>
                  <span class="paren4">(<span class="code"><span class="keyword">:url</span> <span class="string">"/id/2"</span>
                   <span class="keyword">:name</span> <span class="string">"meymao"</span></span>)</span></span>)</span>
          <span class="keyword">:has-next-page</span> T</span>)</span></span>)</span></span></code></pre>

<h3>JSON API</h3>

<p>This is an example of a JSON API.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/user.json"</span> <span class="paren2">(<span class="code">&amp;key |id|</span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">let</span></i> <span class="paren3">(<span class="code"><span class="paren4">(<span class="code">person <span class="paren5">(<span class="code">find-person-from-db |id|</span>)</span></span>)</span></span>)</span>
    <span class="comment">;; person =&gt; (:|name| "Eitaro Fukamachi" :|email| "e.arrows@gmail.com")
</span>    <span class="paren3">(<span class="code">render-json person</span>)</span></span>)</span></span>)</span>

<span class="comment">;=&gt; {"name":"Eitaro Fukamachi","email":"e.arrows@gmail.com"}</span></span></code></pre>

<p><code>render-json</code> is a part of a skeleton project. You can find its code in &ldquo;src/view.lisp&rdquo;.</p>

<h3>Static file</h3>

<p>Images, CSS, JS, favicon.ico and robot.txt in &ldquo;static/&rdquo; directory will be served by default.</p>

<pre><code>/images/logo.png =&gt; {PROJECT_ROOT}/static/images/logo.png
/css/main.css    =&gt; {PROJECT_ROOT}/static/css/main.css
/js/app/index.js =&gt; {PROJECT_ROOT}/static/js/app/index.js
/robot.txt       =&gt; {PROJECT_ROOT}/static/robot.txt
/favicon.ico     =&gt; {PROJECT_ROOT}/static/favicon.ico</code></pre>

<p>You can change these rules by rewriting &ldquo;PROJECT_ROOT/app.lisp&rdquo;. See <a href="http://quickdocs.org/clack/api#package-CLACK.MIDDLEWARE.STATIC" >Clack.Middleware.Static</a> for detail.</p>

<h3>Configuration</h3>

<p>Caveman adopts <a href="https://github.com/fukamachi/envy" >Envy</a> as a configuration switcher. It allows to define multiple configurations and to switch them by an environment variable.</p>

<p>This is a typical example.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defpackage</span></i> <span class="keyword">:myapp.config</span>
  <span class="paren2">(<span class="code"><span class="keyword">:use</span> <span class="keyword">:cl</span>
        <span class="keyword">:envy</span></span>)</span></span>)</span>
<span class="paren1">(<span class="code">in-package <span class="keyword">:myapp.config</span></span>)</span>

<span class="paren1">(<span class="code">setf <span class="paren2">(<span class="code">config-env-var</span>)</span> <span class="string">"APP_ENV"</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> <span class="keyword">:common</span>
  `<span class="paren2">(<span class="code"><span class="keyword">:application-root</span> ,<span class="paren3">(<span class="code">asdf:component-pathname <span class="paren4">(<span class="code">asdf:find-system <span class="keyword">:myapp</span></span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> |development|
  '<span class="paren2">(<span class="code"><span class="keyword">:debug</span> T
    <span class="keyword">:databases</span>
    <span class="paren3">(<span class="code"><span class="paren4">(<span class="code"><span class="keyword">:maindb</span> <span class="keyword">:sqlite3</span> <span class="keyword">:database-name</span> ,<span class="paren5">(<span class="code">merge-pathnames #P<span class="string">"test.db"</span>
                                                        <span class="special">*application-root*</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> |production|
  '<span class="paren2">(<span class="code"><span class="keyword">:databases</span>
    <span class="paren3">(<span class="code"><span class="paren4">(<span class="code"><span class="keyword">:maindb</span> <span class="keyword">:mysql</span> <span class="keyword">:database-name</span> <span class="string">"myapp"</span> <span class="keyword">:username</span> <span class="string">"whoami"</span> <span class="keyword">:password</span> <span class="string">"1234"</span></span>)</span>
     <span class="paren4">(<span class="code"><span class="keyword">:workerdb</span> <span class="keyword">:mysql</span> <span class="keyword">:database-name</span> <span class="string">"jobs"</span> <span class="keyword">:username</span> <span class="string">"whoami"</span> <span class="keyword">:password</span> <span class="string">"1234"</span></span>)</span></span>)</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> |staging|
  `<span class="paren2">(<span class="code"><span class="keyword">:debug</span> T
    ,@|production|</span>)</span></span>)</span></span></code></pre>

<p>Every configuration is a property list. You can choose the configuration which to use by setting <code>APP_ENV</code>.</p>

<p>To get a value from the current configuration, call <code>myapp.config:config</code> with a key you want.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">import 'myapp.config:config</span>)</span>

<span class="paren1">(<span class="code">setf <span class="paren2">(<span class="code">osicat:environment-variable <span class="string">"APP_ENV"</span></span>)</span> <span class="string">"development"</span></span>)</span>
<span class="paren1">(<span class="code">config <span class="keyword">:debug</span></span>)</span>
<span class="comment">;=&gt; T</span></span></code></pre>

<h3>Database</h3>

<p>When you add <code>:databases</code> to the configuration, Caveman enables database support. <code>:databases</code> is an association list of database settings.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> |production|
  '<span class="paren2">(<span class="code"><span class="keyword">:databases</span>
    <span class="paren3">(<span class="code"><span class="paren4">(<span class="code"><span class="keyword">:maindb</span> <span class="keyword">:mysql</span> <span class="keyword">:database-name</span> <span class="string">"myapp"</span> <span class="keyword">:username</span> <span class="string">"whoami"</span> <span class="keyword">:password</span> <span class="string">"1234"</span></span>)</span>
     <span class="paren4">(<span class="code"><span class="keyword">:workerdb</span> <span class="keyword">:mysql</span> <span class="keyword">:database-name</span> <span class="string">"jobs"</span> <span class="keyword">:username</span> <span class="string">"whoami"</span> <span class="keyword">:password</span> <span class="string">"1234"</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<p><code>db</code> in a package <code>myapp.db</code> is a function for connecting to each databases configured the above. Here is an example.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">use-package '<span class="paren2">(<span class="code"><span class="keyword">:myapp.db</span> <span class="keyword">:sxql</span> <span class="keyword">:datafly</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defun</span></i> search-adults <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-connection</span></i> <span class="paren3">(<span class="code">db</span>)</span>
    <span class="paren3">(<span class="code">retrieve-all
      <span class="paren4">(<span class="code">select <span class="keyword">:*</span>
        <span class="paren5">(<span class="code">from <span class="keyword">:person</span></span>)</span>
        <span class="paren5">(<span class="code">where <span class="paren6">(<span class="code"><span class="keyword">:&gt;=</span> <span class="keyword">:age</span> 20</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<p>The connection is alive during the Lisp session and will be reused in each HTTP requests.</p>

<p><code>retrieve-all</code> and the query language came from <a href="https://github.com/fukamachi/datafly" >datafly</a> and <a href="https://github.com/fukamachi/sxql" >SxQL</a>. See those documentations for more informations.</p>

<h3>Set HTTP headers or HTTP status</h3>

<p>There are several special variables available during a HTTP request. <code>*request*</code> and <code>*response*</code> represents a request and a response. If you are familiar with <a href="http://clacklisp.org/" >Clack</a>, these are instances of subclasses of <a href="http://quickdocs.org/clack/api#package-CLACK.REQUEST" >Clack.Request</a> and <a href="http://quickdocs.org/clack/api#package-CLACK.RESPONSE" >Clack.Response</a>.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">use-package <span class="keyword">:caveman2</span></span>)</span>

<span class="comment">;; Get a value of Referer header.
</span><span class="paren1">(<span class="code">http-referer <span class="special">*request*</span></span>)</span>

<span class="comment">;; Set Content-Type header.
</span><span class="paren1">(<span class="code">setf <span class="paren2">(<span class="code">getf <span class="paren3">(<span class="code">response-headers <span class="special">*response*</span> <span class="keyword">:content-type</span></span>)</span> <span class="string">"application/json"</span></span>)</span>

<span class="comment">;; Set HTTP status.
</span><span class="paren2">(<span class="code">setf <span class="paren3">(<span class="code">status <span class="special">*response*</span></span>)</span> 304</span>)</span></span></span></span></code></pre>

<p>If you would like to set Content-Type &ldquo;application/json&rdquo; for all &ldquo;*.json&rdquo; requests, <code>next-route</code> will help you.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/*.json"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code">setf <span class="paren3">(<span class="code">getf <span class="paren4">(<span class="code">response-headers <span class="special">*response*</span></span>)</span> <span class="keyword">:content-type</span></span>)</span> <span class="string">"application/json"</span></span>)</span>
  <span class="paren2">(<span class="code">next-route</span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/user.json"</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/search.json"</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span>
<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/new.json"</span> <span class="keyword">:method</span> <span class="keyword">:POST</span></span>)</span> <span class="paren2">(<span class="code"></span>)</span> ...</span>)</span></span></code></pre>

<h3>Using session</h3>

<p>Session data is for memorizing user-specific data. <code>*session*</code> is a hash table represents session data.</p>

<p>This example increments <code>:counter</code> in the session and displays it for each visitors.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/counter"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code">format nil <span class="string">"You came here ~A times."</span>
          <span class="paren3">(<span class="code">incf <span class="paren4">(<span class="code">gethash <span class="keyword">:counter</span> <span class="special">*session*</span> 0</span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<p>Caveman2 stores the session data in-memory by default. To change it, specify <code>:store</code> to <code>:session</code> in &ldquo;PROJECT_ROOT/app.lisp&rdquo;.</p>

<p>This example uses RDBMS to store it.</p>

<pre><code><span class="code"><span class="diff-normal">      '(:backtrace</span><span class="diff-normal">
</span><span class="diff-normal">        :output (getf (config) :error-log))</span><span class="diff-normal">
</span><span class="diff-normal">      nil)</span><span class="diff-normal">
</span><span class="diff-deleted">- :session
</span><span class="diff-added">+ (:session
</span><span class="diff-added">+  :store (make-dbi-store :connector (lambda ()
</span><span class="diff-added">+                                      (apply #'dbi:connect
</span><span class="diff-added">+                                             (myapp.db:connection-settings)))))
</span><span class="diff-normal">  (if (productionp)</span><span class="diff-normal">
</span><span class="diff-normal">      nil</span><span class="diff-normal">
</span><span class="diff-normal">      (lambda (app)</span></span></code></pre>

<p>NOTE: Don&apos;t forget to add <code>:lack-session-store-dbi</code> as <code>:depends-on</code> of your app. It is not a part of Clack/Lack.</p>

<p>See the source code of Lack.Session.Store.DBi for more informations.</p>

<ul>
<li><a href="https://github.com/fukamachi/lack/blob/master/src/middleware/session/store/dbi.lisp" >Lack.Session.Store.Dbi</a></li>
</ul>

<h3>Throw an HTTP status code</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code">import 'caveman2:throw-code</span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="paren2">(<span class="code"><span class="string">"/auth"</span> <span class="keyword">:method</span> <span class="keyword">:POST</span></span>)</span> <span class="paren2">(<span class="code">&amp;key |name| |password|</span>)</span>
  <span class="paren2">(<span class="code">unless <span class="paren3">(<span class="code">authorize |name| |password|</span>)</span>
    <span class="paren3">(<span class="code">throw-code 403</span>)</span></span>)</span></span>)</span></span></code></pre>

<h3>Specify error pages</h3>

<p>To specify error pages for 404, 500 or so, define a method <code>on-exception</code> of your app.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defmethod</span></i> on-exception <span class="paren2">(<span class="code"><span class="paren3">(<span class="code">app &lt;web&gt;</span>)</span> <span class="paren3">(<span class="code">code <span class="paren4">(<span class="code">eql 404</span>)</span></span>)</span></span>)</span>
  <span class="paren2">(<span class="code">declare <span class="paren3">(<span class="code">ignore app code</span>)</span></span>)</span>
  <span class="paren2">(<span class="code">merge-pathnames #P<span class="string">"_errors/404.html"</span>
                   <span class="special">*template-directory*</span></span>)</span></span>)</span></span></code></pre>

<h3>Start a server</h3>

<p>Your application has functions named <code>start</code> and <code>stop</code> to start/stop your web application. This is a example assuming that the name of your application is &ldquo;myapp&rdquo;.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">myapp:start <span class="keyword">:port</span> 8080</span>)</span></span></code></pre>

<p>As Caveman bases on Clack/Lack, you can choose which server to run on &ndash; Hunchentoot, mod_lisp or FastCGI.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code">myapp:start <span class="keyword">:server</span> <span class="keyword">:hunchentoot</span> <span class="keyword">:port</span> 8080</span>)</span>
<span class="paren1">(<span class="code">myapp:start <span class="keyword">:server</span> <span class="keyword">:fcgi</span> <span class="keyword">:port</span> 8080</span>)</span></span></code></pre>

<p>I recommend you to use Hunchentoot in local machine and use FastCGI for production environment.</p>

<p>You can also start your application by using <a href="https://github.com/fukamachi/shelly" >Shelly</a>.</p>

<pre><code>$ APP_ENV=development shly -Lclack clackup app.lisp --server :fcgi --port 8080
</code></pre>

<p>Shelly allows you to execute a Common Lisp function like a shell command.</p>

<h3>Hot Deployment</h3>

<p>Though Caveman doesn&apos;t have a feature for hot deployment, <a href="http://search.cpan.org/~kazuho/Server-Starter-0.15/lib/Server/Starter.pm" >Server::Starter</a> &ndash; a Perl module &ndash; makes it easy.</p>

<pre><code>$ APP_ENV=production start_server --port 8080 -- shly start --server :fcgi
</code></pre>

<p>To restart the server, send HUP signal (<code>kill -HUP &lt;pid&gt;</code>) to the <code>start_server</code> process.</p>

<h3>Error Log</h3>

<p>Caveman outputs error backtraces to a file which is specified at <code>:error-log</code> in your configuration.</p>

<pre><code><span class="code"><span class="paren1">(<span class="code"><i><span class="symbol">defconfig</span></i> |default|
  `<span class="paren2">(<span class="code"><span class="keyword">:error-log</span> #P<span class="string">"/var/log/apps/myapp_error.log"</span>
    <span class="keyword">:databases</span>
    <span class="paren3">(<span class="code"><span class="paren4">(<span class="code"><span class="keyword">:maindb</span> <span class="keyword">:sqlite3</span> <span class="keyword">:database-name</span> ,<span class="paren5">(<span class="code">merge-pathnames #P<span class="string">"myapp.db"</span>
                                                        <span class="special">*application-root*</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>

<h2>Use another templating library</h2>

<h3>CL-WHO</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code">import '<i><span class="symbol">cl-who:with-html-output-to-string</span></i></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code"><i><span class="symbol">with-html-output-to-string</span></i> <span class="paren3">(<span class="code">output nil <span class="keyword">:prologue</span> t</span>)</span>
    <span class="paren3">(<span class="code"><span class="keyword">:html</span>
      <span class="paren4">(<span class="code"><span class="keyword">:head</span> <span class="paren5">(<span class="code"><span class="keyword">:title</span> <span class="string">"Welcome to Caveman!"</span></span>)</span></span>)</span>
      <span class="paren4">(<span class="code"><span class="keyword">:body</span> <span class="string">"Blah blah blah."</span></span>)</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;=&gt; "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;
</span><span class="comment">;   &lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to Caveman!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Blah blah blah.&lt;/body&gt;&lt;/html&gt;"</span></span></code></pre>

<ul>
<li><a href="http://weitz.de/cl-who/" >CL-WHO Website</a></li>
</ul>

<h3>CL-Markup</h3>

<pre><code><span class="code"><span class="paren1">(<span class="code">import 'cl-markup:xhtml</span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code">xhtml
    <span class="paren3">(<span class="code"><span class="keyword">:head</span> <span class="paren4">(<span class="code"><span class="keyword">:title</span> <span class="string">"Welcome to Caveman!"</span></span>)</span></span>)</span>
    <span class="paren3">(<span class="code"><span class="keyword">:body</span> <span class="string">"Blah blah blah."</span></span>)</span></span>)</span></span>)</span>
<span class="comment">;=&gt; "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to Caveman!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Blah blah blah.&lt;/body&gt;&lt;/html&gt;"</span></span></code></pre>

<ul>
<li><a href="https://github.com/arielnetworks/cl-markup" >CL-Markup repository</a></li>
</ul>

<h3>cl-closure-template</h3>

<pre><code>{namespace myapp.view}

{template renderIndex}
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;"Welcome to Caveman!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  Blah blah blah.
&lt;/body&gt;
&lt;/html&gt;
{/template}</code></pre>

<pre><code><span class="code"><span class="paren1">(<span class="code">import '<span class="special">myapp.config:*template-directory*</span></span>)</span>

<span class="paren1">(<span class="code">closure-template:compile-cl-templates <span class="paren2">(<span class="code">merge-pathnames #P<span class="string">"index.tmpl"</span>
                                                        <span class="special">*template-directory*</span></span>)</span></span>)</span>

<span class="paren1">(<span class="code"><i><span class="symbol">defroute</span></i> <span class="string">"/"</span> <span class="paren2">(<span class="code"></span>)</span>
  <span class="paren2">(<span class="code">myapp.view:render-index</span>)</span></span>)</span></span></code></pre>

<ul>
<li><a href="http://quickdocs.org/cl-closure-template/" >cl-closure-template</a></li>
<li><a href="https://developers.google.com/closure/templates/docs/overview" >Closure Templates Documentation</a></li>
</ul>

<!-- Commenting out because these are old.

## Use another database library

### CLSQL

You can use Lack.Middleware.Clsql to use CLSQL in Clack compliant application.

In Caveman, add the middleware to `builder` in "PROJECT_ROOT/app.lisp".

```common-lisp
(ql:quickload :clack-middleware-clsql)
(import 'clack.middleware.clsql:<clack-middleware-clsql>)

(builder
 (<clack-middleware-clsql>
  :database-type :mysql
  :connection-spec '("localhost" "db" "fukamachi" "password"))
 *web*)
```

* [Clack.Middleware.Clsql](http://quickdocs.org/clack/api#system-clack-middleware-clsql)
* [CLSQL: Common Lisp SQL Interface](http://clsql.b9.com/)

### Postmodern

You can use Clack.Middleware.Postmodern to use Postmodern in Clack compliant application.

In Caveman, add the middleware to `builder` in "PROJECT_ROOT/app.lisp".


```common-lisp
(ql:quickload :clack-middleware-postmodern)
(import 'clack.middleware.postmodern:<clack-middleware-postmodern>)

(builder
 (<clack-middleware-postmodern>
  :database "database-name"
  :user "database-user"
  :password "database-password"
  :host "remote-address")
 *web*)
```

* [Clack.Middleware.Postmodern](http://quickdocs.org/clack/api#system-clack-middleware-postmodern)
* [Postmodern](http://marijnhaverbeke.nl/postmodern/)

-->

<h2>See Also</h2>

<ul>
<li><a href="http://clacklisp.org/" >Clack</a> - Web application environment.</li>
<li><a href="https://github.com/fukamachi/lack" >Lack</a> - The core of Clack.</li>
<li><a href="http://8arrow.org/ningle/" >ningle</a> - Super micro web application framework Caveman bases on.</li>
<li><a href="http://mmontone.github.io/djula/" >Djula</a> - HTML Templating engine.</li>
<li><a href="http://8arrow.org/cl-dbi/" >CL-DBI</a> - Database independent interface library.</li>
<li><a href="http://8arrow.org/sxql/" >SxQL</a> - SQL builder library.</li>
<li><a href="https://github.com/fukamachi/envy" >Envy</a> - Configuration switcher.</li>
<li><a href="https://github.com/fukamachi/shelly" >Shelly</a> - Script to run Common Lisp from shell.</li>
</ul>

<h2>Author</h2>

<ul>
<li>Eitaro Fukamachi (e.arrows@gmail.com)</li>
</ul>

<h1>License</h1>

<p>Licensed under the LLGPL License.</p>
