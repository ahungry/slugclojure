<h1>Overview</h1>

<p>zsort is a collection of portable sorting algorithms. Common lisp provides the sort and stable-sort functions but these can have different algorithms implemented according to each implementation. Also, the standard sorting function might not be the best for a certain situation. This library aims to provide developers more options. Although for most situations the standard functions are more than enough, zsort could be a useful complement. </p>

<h1>Sorting Algorithms</h1>

<p>The following comparison based algorithms are implemented:</p>

<ul>
<li>insertion-sort</li>
<li>quicksort</li>
<li>randomized-quicksort</li>
<li>merge-sort</li>
<li>heapsort</li>
</ul>

<p>At the moment, only one non-comparison algorithm is implemented:</p>

<ul>
<li>counting-sort</li>
</ul>

<h1>Install</h1>

<p>zsort is available via <a href="http://www.quicklisp.org" >Quicklisp</a> and that is the preferable method of installation. To use it, first load Quicklisp in your Common Lisp implementation and then evaluate <code>(ql:quickload &quot;zsort&quot;)</code></p>

<h1>How to Use</h1>

<p>All comparison sorts have the same syntax <code>(&lt;sort&gt; sequence predicate &amp;key key)</code> and return a sorted sequence. All the functions sort destructively, i.e., keep a copy of the unsorted sequence if you wish to keep it. </p>

<p>Counting sort only accepts sequences without key data and can be sorted in ascending or descending order, according to the value of the <code>:ascend</code> key (t for ascending and nil for descending). </p>

<p>Although zsort accepts list sequences, the algorithms are expected to work on vectors/arrays. A specialized sort for lists will be included in the future.</p>

<h1>Examples</h1>

<pre><code>CL-USER&gt; (zsort:quicksort #(4 5 7 3 9 2 4 2 0 8 2 4 1 5 9) #'&lt;)
 #(0 1 2 2 2 3 4 4 4 5 5 7 8 9 9)

CL-USER&gt; (zsort:merge-sort #((4 5) (7 3) (9 2) (4 2) (0 8) (2 4) (1 5) (9 1)) #'&gt; :key #'first)
#((9 2) (9 1) (7 3) (4 5) (4 2) (2 4) (1 5) (0 8))

CL-USER&gt; (zsort:counting-sort #(4 5 7 3 9 2 4 2 0 8 2 4 1 5 9) :ascend t)
#(0 1 2 2 2 3 4 4 4 5 5 7 8 9 9)
</code></pre>

<h1>Todo</h1>

<p>The following is planned for zsort:</p>

<ul>
<li>More sorting algorithms, e.g., timsort, radix sort and bucket sort</li>
<li>External sorting to handle large amounts of data</li>
<li>Parallel implementations of some sorting algorithms</li>
</ul>

<h1>License</h1>

<p>zsort is available under an MIT-style license. See the LICENSE file.</p>
